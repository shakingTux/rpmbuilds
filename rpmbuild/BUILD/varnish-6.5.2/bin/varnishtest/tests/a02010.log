**** dT   0.000
*    top  TEST ./tests/a02010.vtc starting
**** top  extmacro def pwd=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest
**** top  extmacro def localhost=127.0.0.1
**** top  extmacro def bad_backend=127.0.0.1 42893
**** top  extmacro def bad_ip=192.0.2.255
**** top  extmacro def topbuild=/root/rpmbuild/BUILD/varnish-6.5.2
**** top  macro def testdir=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest/./tests
**** top  macro def tmpdir=/tmp/vtc.45476.74ceaf4c
**   top  === varnishtest "Verify the initial window size"
*    top  VTEST Verify the initial window size
**   top  === server s1 {
**   s1   Starting server
**** s1   macro def s1_addr=127.0.0.1
**** s1   macro def s1_port=39383
**** s1   macro def s1_sock=127.0.0.1 39383
*    s1   Listen on 127.0.0.1 39383
**   top  === client c1 -connect ${s1_sock} {
**   c1   Starting client
**   c1   Waiting for client
**   s1   Started on 127.0.0.1 39383 (1 iterations)
**   c1   Started on 127.0.0.1 39383 (1 iterations)
***  c1   Connect to 127.0.0.1 39383
**** dT   0.001
***  s1   accepted fd 5 127.0.0.1 46108
***  c1   connected fd 6 from 127.0.0.1 46108 to 127.0.0.1 39383
**   s1   === stream 0 {
**** s1   Not in H/2 mode, do what's needed
**   s1   === rxpri
**   c1   === stream 0 {
**** c1   Not in H/2 mode, do what's needed
**   c1   === txpri
**** c1   txpri|PRI * HTTP/2.0\r
**** c1   txpri|\r
**** c1   txpri|SM\r
**** c1   txpri|\r
**** dT   0.011
**   s1   === stream 0 {
**   c1   === stream 0 {
**   s1   Starting stream 0x7fe6480013d0
**   c1   Starting stream 0x7fe6400014f0
**   s1   Waiting for stream 0
**   c1   Waiting for stream 0
**   s1   === txsettings
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === txsettings
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === rxsettings
**   c1   === rxsettings
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === txsettings -ack
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   s1   === rxsettings
**** dT   0.012
**   c1   === rxsettings
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   flag: ACK
**   s1   === expect settings.ack == true
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**** s1   EXPECT settings.ack (true) == "true" match
***  c1   flag: ACK
**   s1   Ending stream 0
**   c1   === expect settings.ack == true
**** c1   EXPECT settings.ack (true) == "true" match
**   c1   Ending stream 0
**   s1   Starting stream 0x7fe6480013d0
**   s1   Waiting for stream 0
**   s1   === rxsettings
**   c1   Starting stream 0x7fe6400014f0
**   c1   Waiting for stream 0
**   c1   === txsettings -winsize 128
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 6
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 6
**** s1   settings->INITIAL_WINDOW_SIZE (4): 128
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   s1   Ending stream 0
**   s1   === stream 1 {
**   s1   Starting stream 0x7fe648002690
**   s1   Waiting for stream 1
**   s1   === rxreq
**   c1   === rxsettings
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   flag: ACK
**   c1   Ending stream 0
**   c1   === stream 1 {
**   c1   Starting stream 0x7fe640002730
**   c1   Waiting for stream 1
**   c1   === txreq
***  c1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 36
***  s1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 36
***  s1   flag: END_STREAM
**** s1   header[ 0]: :path : /
**** s1   header[ 1]: :method : GET
**** s1   header[ 2]: :scheme : http
**   c1   === rxresp
**   s1   === txresp -bodylen 100
***  s1   tx: stream: 1, type: HEADERS (1), flags: 0x04, size: 13
***  c1   rx: stream: 1, type: HEADERS (1), flags: 0x04, size: 13
***  c1   flag: END_TYPE_HEADERS
**** c1   header[ 0]: :status : 200
***  s1   tx: stream: 1, type: DATA (0), flags: 0x01, size: 100
***  c1   rx: stream: 1, type: DATA (0), flags: 0x01, size: 100
***  c1   flag: END_STREAM
**   s1   Ending stream 1
**   c1   === expect resp.bodylen == 100
**** c1   EXPECT resp.bodylen (100) == "100" match
**   c1   === expect stream.window == 28
**** c1   EXPECT stream.window (28) == "28" match
**   s1   === stream 0 {
**   s1   Starting stream 0x7fe6480013d0
**   s1   Waiting for stream 0
**   c1   Ending stream 1
**   c1   === stream 0 {
**   c1   Starting stream 0x7fe6400014f0
**   c1   Waiting for stream 0
**   s1   === rxsettings
**   c1   === txsettings -winsize 64
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 6
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 6
**** s1   settings->INITIAL_WINDOW_SIZE (4): 64
**   c1   === rxsettings
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   flag: ACK
**   s1   Ending stream 0
**   c1   === expect stream.window == 65435
**** c1   EXPECT stream.window (65435) == "65435" match
**   c1   Ending stream 0
**** dT   0.013
***  s1   shutting fd 5
**   s1   Ending
**   c1   === stream 1 {
**   c1   Starting stream 0x7fe640002730
**   c1   Waiting for stream 1
**   c1   === expect stream.window == -36
**** c1   EXPECT stream.window (-36) == "-36" match
**   c1   Ending stream 1
***  c1   closing fd 6
**   c1   Ending
**   top  === server s1 -wait
**   s1   Waiting for server (4/-1)
*    top  RESETTING after ./tests/a02010.vtc
*    top  TEST ./tests/a02010.vtc completed
#    top  TEST ./tests/a02010.vtc passed (0.049)
