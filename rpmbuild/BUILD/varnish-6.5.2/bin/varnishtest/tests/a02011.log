**** dT   0.000
*    top  TEST ./tests/a02011.vtc starting
**** top  extmacro def pwd=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest
**** top  extmacro def localhost=127.0.0.1
**** top  extmacro def bad_backend=127.0.0.1 41305
**** top  extmacro def bad_ip=192.0.2.255
**** top  extmacro def topbuild=/root/rpmbuild/BUILD/varnish-6.5.2
**** top  macro def testdir=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest/./tests
**** top  macro def tmpdir=/tmp/vtc.45513.7b03274f
**   top  === varnishtest "overflow"
*    top  VTEST overflow
**   top  === server s1 {
**   s1   Starting server
**** s1   macro def s1_addr=127.0.0.1
**** s1   macro def s1_port=44347
**** s1   macro def s1_sock=127.0.0.1 44347
*    s1   Listen on 127.0.0.1 44347
**   top  === client c1  -connect ${s1_sock} {
**   c1   Starting client
**   c1   Waiting for client
**** dT   0.001
**   c1   Started on 127.0.0.1 44347 (1 iterations)
***  c1   Connect to 127.0.0.1 44347
**   s1   Started on 127.0.0.1 44347 (1 iterations)
***  c1   connected fd 5 from 127.0.0.1 52782 to 127.0.0.1 44347
***  s1   accepted fd 6 127.0.0.1 52782
**   c1   === stream 1 {
**** c1   Not in H/2 mode, do what's needed
**   c1   === txpri
**   s1   === stream 1 {
**** c1   txpri|PRI * HTTP/2.0\r
**** c1   txpri|\r
**** c1   txpri|SM\r
**** c1   txpri|\r
**** s1   Not in H/2 mode, do what's needed
**   s1   === rxpri
**** dT   0.011
**   s1   === stream 0 {
**   c1   === stream 0 {
**   s1   Starting stream 0x7f6050001400
**   c1   Starting stream 0x7f6048001450
**   s1   Waiting for stream 0
**** dT   0.012
**   c1   Waiting for stream 0
**   s1   === txsettings
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === txsettings
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === rxsettings
**   c1   === rxsettings
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === txsettings -ack
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   c1   === rxsettings
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   flag: ACK
**   c1   === expect settings.ack == true
**** c1   EXPECT settings.ack (true) == "true" match
**   c1   Ending stream 0
**   s1   === rxsettings
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   flag: ACK
**   s1   === expect settings.ack == true
**** s1   EXPECT settings.ack (true) == "true" match
**   s1   Ending stream 0
**   s1   Starting stream 0x7f6050002690
**   s1   Waiting for stream 1
**   s1   === rxreq
**   c1   Starting stream 0x7f6048002650
**   c1   Waiting for stream 1
**   c1   === txreq -req GET \
***  c1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 72
***  s1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 72
***  s1   flag: END_STREAM
**** s1   header[ 0]: :method : GET
**** s1   header[ 1]: :path : /
**** s1   header[ 2]: :scheme : http
**** s1   header[ 3]: :authority : localhost
**** s1   header[ 4]: :scheme : http
**   s1   === txresp -hdr long-header-original1 original1 \
***  s1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 145
**   s1   Ending stream 1
***  s1   shutting fd 6
**   s1   Ending
**   c1   === rxresp
***  c1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 145
***  c1   flag: END_STREAM
**** c1   header[ 0]: long-header-original1 : original1
**** c1   header[ 1]: long-header-original2 : original2
**** c1   header[ 2]: long-header-original3 : original3
**** dT   0.013
**** c1   header[ 3]: long-header-original4 : original4
**** c1   header[ 4]: :status : 200
**   c1   === expect resp.http.:status == 200
**** c1   EXPECT resp.http.:status (200) == "200" match
**   c1   Ending stream 1
***  c1   closing fd 5
**   c1   Ending
*    top  RESETTING after ./tests/a02011.vtc
**   s1   Waiting for server (4/-1)
*    top  TEST ./tests/a02011.vtc completed
#    top  TEST ./tests/a02011.vtc passed (0.050)
