**** dT   0.000
*    top  TEST ./tests/a02000.vtc starting
**** top  extmacro def pwd=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest
**** top  extmacro def localhost=127.0.0.1
**** top  extmacro def bad_backend=127.0.0.1 38385
**** top  extmacro def bad_ip=192.0.2.255
**** top  extmacro def topbuild=/root/rpmbuild/BUILD/varnish-6.5.2
**** top  macro def testdir=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest/./tests
**** top  macro def tmpdir=/tmp/vtc.45132.1ab61e90
**   top  === varnishtest "Close/accept after H/2 upgrade"
*    top  VTEST Close/accept after H/2 upgrade
**   top  === server s1 {
**   s1   Starting server
**** s1   macro def s1_addr=127.0.0.1
**** s1   macro def s1_port=37237
**** s1   macro def s1_sock=127.0.0.1 37237
*    s1   Listen on 127.0.0.1 37237
**   top  === client c1 -connect ${s1_sock} {
**   c1   Starting client
**   s1   Started on 127.0.0.1 37237 (1 iterations)
**   c1   Waiting for client
**   c1   Started on 127.0.0.1 37237 (1 iterations)
***  c1   Connect to 127.0.0.1 37237
***  c1   connected fd 6 from 127.0.0.1 36458 to 127.0.0.1 37237
***  s1   accepted fd 5 127.0.0.1 36458
**   s1   === stream 1 {
**** s1   Not in H/2 mode, do what's needed
**   s1   === rxpri
**** dT   0.001
**   c1   === stream 1 {
**** c1   Not in H/2 mode, do what's needed
**   c1   === txpri
**** c1   txpri|PRI * HTTP/2.0\r
**** c1   txpri|\r
**** c1   txpri|SM\r
**** c1   txpri|\r
**** dT   0.011
**   s1   === stream 0 {
**   c1   === stream 0 {
**   s1   Starting stream 0x7fc4340013c0
**   c1   Starting stream 0x7fc42c0013e0
**** dT   0.012
**   s1   Waiting for stream 0
**   s1   === txsettings
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   Waiting for stream 0
**   s1   === rxsettings
**   c1   === txsettings
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === rxsettings
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   s1   === rxsettings
**   c1   === txsettings -ack
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   c1   === rxsettings
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   flag: ACK
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   flag: ACK
**   s1   === expect settings.ack == true
**** s1   EXPECT settings.ack (true) == "true" match
**   s1   Ending stream 0
**   s1   Starting stream 0x7fc434002650
**   s1   Waiting for stream 1
**   s1   === rxreq
**   c1   === expect settings.ack == true
**** c1   EXPECT settings.ack (true) == "true" match
**   c1   Ending stream 0
**   c1   Starting stream 0x7fc42c0025e0
**** dT   0.013
**   c1   Waiting for stream 1
**   c1   === txreq
***  c1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 36
***  s1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 36
***  s1   flag: END_STREAM
**   c1   === rxresp
**** s1   header[ 0]: :path : /
**** s1   header[ 1]: :method : GET
**** s1   header[ 2]: :scheme : http
**   s1   === txresp
***  s1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 13
**   s1   Ending stream 1
***  c1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 13
***  c1   flag: END_STREAM
**** c1   header[ 0]: :status : 200
**   s1   === expect_close
**** s1   Expecting close (fd = 5)
**   c1   Ending stream 1
***  c1   closing fd 6
**   c1   Ending
**   top  === client c1 -connect ${s1_sock} {
**   c1   Starting client
**** s1   fd=5 EOF, as expected
**   s1   === accept
**   c1   Waiting for client
**   c1   Started on 127.0.0.1 37237 (1 iterations)
***  c1   Connect to 127.0.0.1 37237
***  c1   connected fd 5 from 127.0.0.1 36460 to 127.0.0.1 37237
**   c1   === txreq
**** c1   txreq|GET / HTTP/1.1\r
**** c1   txreq|Host: 127.0.0.1\r
**** c1   txreq|\r
**** s1   Accepting
***  s1   Accepted socket fd is 6
**   s1   === rxreq
**   c1   === rxresp
**** dT   0.014
**** s1   rxhdr|GET / HTTP/1.1\r
**** s1   rxhdr|Host: 127.0.0.1\r
**** s1   rxhdr|\r
**** s1   rxhdrlen = 35
**** s1   http[ 0] |GET
**** s1   http[ 1] |/
**** s1   http[ 2] |HTTP/1.1
**** s1   http[ 3] |Host: 127.0.0.1
**** s1   bodylen = 0
**   s1   === txresp
**** s1   txresp|HTTP/1.1 200 OK\r
**** s1   txresp|Content-Length: 0\r
**** s1   txresp|\r
**   s1   === close
**** s1   Closed
**   s1   === accept
**** s1   Accepting
**** c1   rxhdr|HTTP/1.1 200 OK\r
**** c1   rxhdr|Content-Length: 0\r
**** c1   rxhdr|\r
**** c1   rxhdrlen = 38
**** c1   http[ 0] |HTTP/1.1
**** c1   http[ 1] |200
**** c1   http[ 2] |OK
**** c1   http[ 3] |Content-Length: 0
**** c1   bodylen = 0
***  c1   closing fd 5
**   c1   Ending
**   top  === client c1 -connect ${s1_sock} {
**   c1   Starting client
**   c1   Waiting for client
**   c1   Started on 127.0.0.1 37237 (1 iterations)
***  c1   Connect to 127.0.0.1 37237
***  s1   Accepted socket fd is 6
**   s1   === rxreq
***  c1   connected fd 5 from 127.0.0.1 36462 to 127.0.0.1 37237
**   c1   === txreq
**** c1   txreq|GET / HTTP/1.1\r
**** c1   txreq|Host: 127.0.0.1\r
**** c1   txreq|\r
**** s1   rxhdr|GET / HTTP/1.1\r
**** s1   rxhdr|Host: 127.0.0.1\r
**** s1   rxhdr|\r
**** s1   rxhdrlen = 35
**** s1   http[ 0] |GET
**** s1   http[ 1] |/
**** s1   http[ 2] |HTTP/1.1
**** s1   http[ 3] |Host: 127.0.0.1
**** dT   0.015
**** s1   bodylen = 0
**   s1   === txresp
**** s1   txresp|HTTP/1.1 200 OK\r
**** s1   txresp|Content-Length: 0\r
**** s1   txresp|\r
**   s1   === stream 1 {
**** s1   Not in H/2 mode, do what's needed
**   s1   === rxpri
**   c1   === rxresp
**** c1   rxhdr|HTTP/1.1 200 OK\r
**** c1   rxhdr|Content-Length: 0\r
**** c1   rxhdr|\r
**** c1   rxhdrlen = 38
**** c1   http[ 0] |HTTP/1.1
**** c1   http[ 1] |200
**** c1   http[ 2] |OK
**** c1   http[ 3] |Content-Length: 0
**** c1   bodylen = 0
**   c1   === stream 1 {
**** c1   Not in H/2 mode, do what's needed
**   c1   === txpri
**** c1   txpri|PRI * HTTP/2.0\r
**** c1   txpri|\r
**** c1   txpri|SM\r
**** c1   txpri|\r
**** dT   0.025
**   s1   === stream 0 {
**   s1   Starting stream 0x7fc434002650
**   s1   Waiting for stream 0
**   s1   === txsettings
**   c1   === stream 0 {
**   c1   Starting stream 0x7fc42c2025f0
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === rxsettings
**** dT   0.026
**   c1   Waiting for stream 0
**   c1   === txsettings
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   s1   === rxsettings
**   c1   === rxsettings
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === txsettings -ack
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   flag: ACK
**   s1   === expect settings.ack == true
**** s1   EXPECT settings.ack (true) == "true" match
**   s1   Ending stream 0
**   c1   === rxsettings
**   s1   Starting stream 0x7fc4340036b0
**   s1   Waiting for stream 1
**   s1   === rxreq
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   flag: ACK
**   c1   === expect settings.ack == true
**** c1   EXPECT settings.ack (true) == "true" match
**   c1   Ending stream 0
**   c1   Starting stream 0x7fc42c203650
**   c1   Waiting for stream 1
**   c1   === txreq
***  c1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 36
***  s1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 36
***  s1   flag: END_STREAM
**** s1   header[ 0]: :path : /
**** s1   header[ 1]: :method : GET
**** s1   header[ 2]: :scheme : http
**   s1   === txresp
***  s1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 13
**   s1   Ending stream 1
**   c1   === rxresp
***  s1   shutting fd 6
**   s1   Ending
***  c1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 13
***  c1   flag: END_STREAM
**** c1   header[ 0]: :status : 200
**   c1   Ending stream 1
***  c1   closing fd 5
**   c1   Ending
**** dT   0.027
**   top  === server s1 -wait
**   s1   Waiting for server (4/-1)
*    top  RESETTING after ./tests/a02000.vtc
*    top  TEST ./tests/a02000.vtc completed
#    top  TEST ./tests/a02000.vtc passed (0.074)
