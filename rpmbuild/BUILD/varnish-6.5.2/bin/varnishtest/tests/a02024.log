**** dT   0.000
*    top  TEST ./tests/a02024.vtc starting
**** top  extmacro def pwd=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest
**** top  extmacro def localhost=127.0.0.1
**** top  extmacro def bad_backend=127.0.0.1 34199
**** top  extmacro def bad_ip=192.0.2.255
**** top  extmacro def topbuild=/root/rpmbuild/BUILD/varnish-6.5.2
**** top  macro def testdir=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest/./tests
**** top  macro def tmpdir=/tmp/vtc.45951.1de3f836
**   top  === varnishtest "Write a body to a file"
*    top  VTEST Write a body to a file
**   top  === server s1 {
**   s1   Starting server
**** s1   macro def s1_addr=127.0.0.1
**** s1   macro def s1_port=40453
**** s1   macro def s1_sock=127.0.0.1 40453
*    s1   Listen on 127.0.0.1 40453
**   top  === client c1 -connect ${s1_sock} {
**   c1   Starting client
**   c1   Waiting for client
**   s1   Started on 127.0.0.1 40453 (1 iterations)
**   c1   Started on 127.0.0.1 40453 (1 iterations)
***  c1   Connect to 127.0.0.1 40453
**** dT   0.001
***  s1   accepted fd 5 127.0.0.1 46592
***  c1   connected fd 6 from 127.0.0.1 46592 to 127.0.0.1 40453
**   s1   === fatal
**   s1   === stream 1 {
**** s1   Not in H/2 mode, do what's needed
**   s1   === rxpri
**   c1   === fatal
**   c1   === stream 1 {
**** c1   Not in H/2 mode, do what's needed
**   c1   === txpri
**** c1   txpri|PRI * HTTP/2.0\r
**** c1   txpri|\r
**** c1   txpri|SM\r
**** c1   txpri|\r
**** dT   0.011
**   c1   === stream 0 {
**   c1   Starting stream 0x7fd1fc0014c0
**   s1   === stream 0 {
**   s1   Starting stream 0x7fd208001420
**   c1   Waiting for stream 0
**   c1   === txsettings
**   s1   Waiting for stream 0
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**** dT   0.012
**   s1   === txsettings
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === rxsettings
**   s1   === rxsettings
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === txsettings -ack
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   c1   === rxsettings
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   s1   === rxsettings
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   flag: ACK
**   c1   === expect settings.ack == true
**** c1   EXPECT settings.ack (true) == "true" match
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   c1   Ending stream 0
***  s1   flag: ACK
**   s1   === expect settings.ack == true
**** s1   EXPECT settings.ack (true) == "true" match
**   c1   Starting stream 0x7fd1fc0026c0
**   s1   Ending stream 0
**   c1   Waiting for stream 1
**   c1   === txreq -req POST -hdr Content-Type text/plain -body request
**   s1   Starting stream 0x7fd2080026b0
***  c1   tx: stream: 1, type: HEADERS (1), flags: 0x04, size: 62
**   s1   Waiting for stream 1
**   s1   === rxreq
***  s1   rx: stream: 1, type: HEADERS (1), flags: 0x04, size: 62
***  s1   flag: END_TYPE_HEADERS
***  c1   tx: stream: 1, type: DATA (0), flags: 0x01, size: 7
**** s1   header[ 0]: :method : POST
**** s1   header[ 1]: Content-Type : text/plain
**** s1   header[ 2]: :path : /
**** s1   header[ 3]: :scheme : http
**   c1   === rxresp
***  s1   rx: stream: 1, type: DATA (0), flags: 0x01, size: 7
***  s1   flag: END_STREAM
**   s1   === expect req.http.Content-Type == "text/plain"
**** s1   EXPECT req.http.Content-Type (text/plain) == "text/plain" match
**   s1   === write_body req.txt
**   s1   === shell {grep -q request req.txt}
**** s1   shell_cmd|exec 2>&1 ; grep -q request req.txt
**** dT   0.015
**** s1   shell_status = 0x0000
**   s1   === txresp -hdr Content-Type text/plain -body response
***  s1   tx: stream: 1, type: HEADERS (1), flags: 0x04, size: 38
***  s1   tx: stream: 1, type: DATA (0), flags: 0x01, size: 8
**   s1   Ending stream 1
***  c1   rx: stream: 1, type: HEADERS (1), flags: 0x04, size: 38
***  c1   flag: END_TYPE_HEADERS
**** c1   header[ 0]: Content-Type : text/plain
**** c1   header[ 1]: :status : 200
***  s1   shutting fd 5
***  c1   rx: stream: 1, type: DATA (0), flags: 0x01, size: 8
***  c1   flag: END_STREAM
**   c1   === expect resp.http.Content-Type == "text/plain"
**** c1   EXPECT resp.http.Content-Type (text/plain) == "text/plain" match
**   c1   === write_body resp.txt
**   s1   Ending
**** dT   0.016
**   c1   === shell {grep -q response resp.txt}
**** c1   shell_cmd|exec 2>&1 ; grep -q response resp.txt
**** dT   0.018
**** c1   shell_status = 0x0000
**   c1   Ending stream 1
**** dT   0.019
***  c1   closing fd 6
**   c1   Ending
**   top  === server s1 -wait
**   s1   Waiting for server (4/-1)
*    top  RESETTING after ./tests/a02024.vtc
*    top  TEST ./tests/a02024.vtc completed
#    top  TEST ./tests/a02024.vtc passed (0.049)
