**** dT   0.000
*    top  TEST ./tests/a02026.vtc starting
**** top  extmacro def pwd=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest
**** top  extmacro def localhost=127.0.0.1
**** top  extmacro def bad_backend=127.0.0.1 36439
**** top  extmacro def bad_ip=192.0.2.255
**** top  extmacro def topbuild=/root/rpmbuild/BUILD/varnish-6.5.2
**** top  macro def testdir=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest/./tests
**** top  macro def tmpdir=/tmp/vtc.46019.2faddf87
**   top  === varnishtest "Test -gzipbody and -gziplen"
*    top  VTEST Test -gzipbody and -gziplen
**   top  === server s1 {
**   s1   Starting server
**** s1   macro def s1_addr=127.0.0.1
**** s1   macro def s1_port=40741
**** s1   macro def s1_sock=127.0.0.1 40741
*    s1   Listen on 127.0.0.1 40741
**   top  === client c1 -connect ${s1_sock} {
**   c1   Starting client
**   c1   Waiting for client
**   c1   Started on 127.0.0.1 40741 (1 iterations)
***  c1   Connect to 127.0.0.1 40741
***  c1   connected fd 5 from 127.0.0.1 50574 to 127.0.0.1 40741
**   c1   === stream 1 {
**** c1   Not in H/2 mode, do what's needed
**   c1   === txpri
**** c1   txpri|PRI * HTTP/2.0\r
**** c1   txpri|\r
**** c1   txpri|SM\r
**** c1   txpri|\r
**   s1   Started on 127.0.0.1 40741 (1 iterations)
***  s1   accepted fd 6 127.0.0.1 50574
**   s1   === stream 1 {
**** s1   Not in H/2 mode, do what's needed
**** dT   0.001
**   s1   === rxpri
**** dT   0.011
**   c1   === stream 0 {
**   c1   Starting stream 0x7f195c001450
**   c1   Waiting for stream 0
**   c1   === txsettings
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === stream 0 {
**   s1   Starting stream 0x7f19540013a0
**   c1   === rxsettings
**   s1   Waiting for stream 0
**   s1   === txsettings
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === txsettings -ack
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   c1   === rxsettings
**   s1   === rxsettings
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   flag: ACK
**   c1   === expect settings.ack == true
**** c1   EXPECT settings.ack (true) == "true" match
**   c1   Ending stream 0
**   c1   Starting stream 0x7f195c002650
**   s1   === rxsettings
**   c1   Waiting for stream 1
**   c1   === txreq
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   flag: ACK
***  c1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 36
**   c1   === rxresp
**   s1   === expect settings.ack == true
**** s1   EXPECT settings.ack (true) == "true" match
**   s1   Ending stream 0
**   s1   Starting stream 0x7f1954002630
**   s1   Waiting for stream 1
**   s1   === rxreq
***  s1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 36
***  s1   flag: END_STREAM
**** s1   header[ 0]: :path : /
**** s1   header[ 1]: :method : GET
**** s1   header[ 2]: :scheme : http
**   s1   === txresp -gzipbody "foo"
**** dT   0.012
**** s1   startbit = 80 10/0
**** s1   lastbit = 80 10/0
**** s1   stopbit = 120 15/0
***  s1   new bodylen 26
**** s1   body|\x1f\x8b\x08\x00\x00\x00\x00\x00\x04\x03\x01\x03\x00\xfc\xfffoo!es\x8c\x03\x00\x00\x00
***  s1   tx: stream: 1, type: HEADERS (1), flags: 0x04, size: 37
***  c1   rx: stream: 1, type: HEADERS (1), flags: 0x04, size: 37
***  c1   flag: END_TYPE_HEADERS
**** c1   header[ 0]: :content-encoding : gzip
**** c1   header[ 1]: :status : 200
***  s1   tx: stream: 1, type: DATA (0), flags: 0x01, size: 26
***  c1   rx: stream: 1, type: DATA (0), flags: 0x01, size: 26
***  c1   flag: END_STREAM
**   c1   === gunzip
**** c1   startbit = 80 10/0
**** c1   lastbit = 80 10/0
**** c1   stopbit = 144 18/0
***  c1   new bodylen 3
**** c1   body|foo
**   c1   === expect resp.body == "foo"
**** c1   EXPECT resp.body (foo) == "foo" match
**   c1   Ending stream 1
**   c1   === stream 3 {
**   c1   Starting stream 0x7f195c0036d0
**   s1   Ending stream 1
**   c1   Waiting for stream 3
**   s1   === stream 3 {
**   c1   === txreq
**   s1   Starting stream 0x7f1954003690
***  c1   tx: stream: 3, type: HEADERS (1), flags: 0x05, size: 36
**   s1   Waiting for stream 3
**   s1   === rxreq
***  s1   rx: stream: 3, type: HEADERS (1), flags: 0x05, size: 36
***  s1   flag: END_STREAM
**   c1   === rxresp
**** s1   header[ 0]: :path : /
**** s1   header[ 1]: :method : GET
**** s1   header[ 2]: :scheme : http
**   s1   === txresp -gziplen 10
**** s1   startbit = 80 10/0
**** s1   lastbit = 80 10/0
**** s1   stopbit = 120 15/0
***  s1   new bodylen 33
**** s1   body|\x1f\x8b\x08\x00\x00\x00\x00\x00\x04\x03\x01
**** s1   body|\x00\xf5\xffYFNb =-H3
**** s1   body|\xdelOM
**** s1   body|\x00\x00\x00
***  s1   tx: stream: 3, type: HEADERS (1), flags: 0x04, size: 37
***  c1   rx: stream: 3, type: HEADERS (1), flags: 0x04, size: 37
***  c1   flag: END_TYPE_HEADERS
***  s1   tx: stream: 3, type: DATA (0), flags: 0x01, size: 33
**** c1   header[ 0]: :content-encoding : gzip
**** c1   header[ 1]: :status : 200
***  c1   rx: stream: 3, type: DATA (0), flags: 0x01, size: 33
***  c1   flag: END_STREAM
**   s1   Ending stream 3
**   c1   === gunzip
**** c1   startbit = 80 10/0
**** c1   lastbit = 80 10/0
**** c1   stopbit = 200 25/0
***  c1   new bodylen 10
**** c1   body|YFNb =-H3
**   c1   === expect resp.bodylen == 10
**** c1   EXPECT resp.bodylen (10) == "10" match
**   c1   Ending stream 3
***  s1   shutting fd 6
**   s1   Ending
***  c1   closing fd 5
**   c1   Ending
*    top  RESETTING after ./tests/a02026.vtc
**   s1   Waiting for server (4/-1)
*    top  TEST ./tests/a02026.vtc completed
#    top  TEST ./tests/a02026.vtc passed (0.020)
