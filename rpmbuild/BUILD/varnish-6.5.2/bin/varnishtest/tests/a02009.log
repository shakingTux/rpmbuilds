**** dT   0.000
*    top  TEST ./tests/a02009.vtc starting
**** top  extmacro def pwd=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest
**** top  extmacro def localhost=127.0.0.1
**** top  extmacro def bad_backend=127.0.0.1 33413
**** top  extmacro def bad_ip=192.0.2.255
**** top  extmacro def topbuild=/root/rpmbuild/BUILD/varnish-6.5.2
**** top  macro def testdir=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest/./tests
**** top  macro def tmpdir=/tmp/vtc.45440.2e58d2d1
**   top  === varnishtest "More HPACK tests"
*    top  VTEST More HPACK tests
**   top  === server s1 {
**   s1   Starting server
**** s1   macro def s1_addr=127.0.0.1
**** s1   macro def s1_port=33041
**** s1   macro def s1_sock=127.0.0.1 33041
*    s1   Listen on 127.0.0.1 33041
**   top  === client c1 -connect ${s1_sock} {
**   c1   Starting client
**   s1   Started on 127.0.0.1 33041 (1 iterations)
**** dT   0.001
**   c1   Waiting for client
**   c1   Started on 127.0.0.1 33041 (1 iterations)
***  c1   Connect to 127.0.0.1 33041
***  s1   accepted fd 5 127.0.0.1 34632
**   s1   === stream 1 {
**** s1   Not in H/2 mode, do what's needed
**   s1   === rxpri
***  c1   connected fd 6 from 127.0.0.1 34632 to 127.0.0.1 33041
**   c1   === stream 1 {
**** c1   Not in H/2 mode, do what's needed
**   c1   === txpri
**** c1   txpri|PRI * HTTP/2.0\r
**** c1   txpri|\r
**** c1   txpri|SM\r
**** c1   txpri|\r
**** dT   0.011
**   s1   === stream 0 {
**   s1   Starting stream 0x7f1c480015f0
**   s1   Waiting for stream 0
**   s1   === txsettings
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === stream 0 {
**   c1   Starting stream 0x7f1c40001790
**   s1   === rxsettings
**   c1   Waiting for stream 0
**   c1   === txsettings
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   s1   === rxsettings
**** dT   0.012
**   c1   === rxsettings
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === txsettings -ack
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   flag: ACK
**   s1   === expect settings.ack == true
**** s1   EXPECT settings.ack (true) == "true" match
**   s1   Ending stream 0
**   s1   Starting stream 0x7f1c48002880
**   c1   === rxsettings
**   s1   Waiting for stream 1
**   s1   === rxreq
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   flag: ACK
**   c1   === expect settings.ack == true
**** c1   EXPECT settings.ack (true) == "true" match
**   c1   Ending stream 0
**   c1   Starting stream 0x7f1c40002990
**   c1   Waiting for stream 1
**   c1   === txreq -idxHdr 2 \
***  c1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 53
***  s1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 53
***  s1   flag: END_STREAM
**** s1   header[ 0]: :method : GET
**** s1   header[ 1]: :scheme : http
**** s1   header[ 2]: :path : /
**** s1   header[ 3]: :authority : www.example.com
**** s1   header[ 4]: :path : /
**** s1   header[ 5]: :method : GET
**** s1   header[ 6]: :scheme : http
**   s1   === expect tbl.dec.size == 57
**** s1   EXPECT tbl.dec.size (57) == "57" match
**   s1   === expect tbl.dec[1].key == ":authority"
**** s1   EXPECT tbl.dec[1].key (:authority) == ":authority" match
**   s1   === expect tbl.dec[1].value == "www.example.com"
**** s1   EXPECT tbl.dec[1].value (www.example.com) == "www.example.com" match
**   s1   === txresp
***  s1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 13
**   s1   Ending stream 1
**   s1   === stream 3 {
**   s1   Starting stream 0x7f1c48003970
**   s1   Waiting for stream 3
**   c1   === expect tbl.enc[1].key == ":authority"
**   s1   === rxreq
**** c1   EXPECT tbl.enc[1].key (:authority) == ":authority" match
**   c1   === expect tbl.enc[1].value == "www.example.com"
**** c1   EXPECT tbl.enc[1].value (www.example.com) == "www.example.com" match
**   c1   === rxresp
***  c1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 13
***  c1   flag: END_STREAM
**** c1   header[ 0]: :status : 200
**   c1   Ending stream 1
**   c1   === stream 3 {
**   c1   Starting stream 0x7f1c40003ae0
**   c1   Waiting for stream 3
**   c1   === txreq -idxHdr 2 \
***  c1   tx: stream: 3, type: HEADERS (1), flags: 0x05, size: 48
***  s1   rx: stream: 3, type: HEADERS (1), flags: 0x05, size: 48
***  s1   flag: END_STREAM
**** s1   header[ 0]: :method : GET
**** s1   header[ 1]: :scheme : http
**** s1   header[ 2]: :path : /
**** s1   header[ 3]: :authority : www.example.com
**** s1   header[ 4]: cache-control : no-cache
**** s1   header[ 5]: :path : /
**** s1   header[ 6]: :method : GET
**** s1   header[ 7]: :scheme : http
**   c1   === expect tbl.enc[1].key == "cache-control"
**** c1   EXPECT tbl.enc[1].key (cache-control) == "cache-control" match
**   s1   === expect tbl.dec[1].key == "cache-control"
**   c1   === expect tbl.enc[1].value == "no-cache"
**** c1   EXPECT tbl.enc[1].value (no-cache) == "no-cache" match
**   c1   === expect tbl.enc[2].key == ":authority"
**** s1   EXPECT tbl.dec[1].key (cache-control) == "cache-control" match
**** c1   EXPECT tbl.enc[2].key (:authority) == ":authority" match
**   s1   === expect tbl.dec[1].value == "no-cache"
**   c1   === expect tbl.enc[2].value == "www.example.com"
**** s1   EXPECT tbl.dec[1].value (no-cache) == "no-cache" match
**** c1   EXPECT tbl.enc[2].value (www.example.com) == "www.example.com" match
**   s1   === expect tbl.dec[2].key == ":authority"
**   c1   === expect tbl.enc.size == 110
**** s1   EXPECT tbl.dec[2].key (:authority) == ":authority" match
**** c1   EXPECT tbl.enc.size (110) == "110" match
**   s1   === expect tbl.dec[2].value == "www.example.com"
**   c1   === rxresp
**** s1   EXPECT tbl.dec[2].value (www.example.com) == "www.example.com" match
**   s1   === expect tbl.dec.size == 110
**** s1   EXPECT tbl.dec.size (110) == "110" match
**   s1   === txresp
***  s1   tx: stream: 3, type: HEADERS (1), flags: 0x05, size: 13
***  c1   rx: stream: 3, type: HEADERS (1), flags: 0x05, size: 13
***  c1   flag: END_STREAM
**** c1   header[ 0]: :status : 200
**   s1   Ending stream 3
**   c1   Ending stream 3
**   s1   === stream 5 {
**   s1   Starting stream 0x7f1c48004ac0
**   s1   Waiting for stream 5
**   c1   === stream 5 {
**   c1   Starting stream 0x7f1c40004c80
**   s1   === rxreq
**   c1   Waiting for stream 5
**   c1   === txreq -idxHdr 2 \
***  c1   tx: stream: 5, type: HEADERS (1), flags: 0x05, size: 60
***  s1   rx: stream: 5, type: HEADERS (1), flags: 0x05, size: 60
***  s1   flag: END_STREAM
**** s1   header[ 0]: :method : GET
**   c1   === expect tbl.enc[1].key == "custom-key"
**** s1   header[ 1]: :scheme : https
**** s1   header[ 2]: :path : /index.html
**** s1   header[ 3]: :authority : www.example.com
**** c1   EXPECT tbl.enc[1].key (custom-key) == "custom-key" match
**** s1   header[ 4]: custom-key : custom-value
**   c1   === expect tbl.enc[1].value == "custom-value"
**** s1   header[ 5]: :path : /
**** s1   header[ 6]: :method : GET
**** c1   EXPECT tbl.enc[1].value (custom-value) == "custom-value" match
**** s1   header[ 7]: :scheme : http
**   c1   === expect tbl.enc[2].key == "cache-control"
**** c1   EXPECT tbl.enc[2].key (cache-control) == "cache-control" match
**** dT   0.013
**   c1   === expect tbl.enc[2].value == "no-cache"
**   s1   === expect tbl.dec[1].key == "custom-key"
**** c1   EXPECT tbl.enc[2].value (no-cache) == "no-cache" match
**   c1   === expect tbl.enc[3].key == ":authority"
**** s1   EXPECT tbl.dec[1].key (custom-key) == "custom-key" match
**** c1   EXPECT tbl.enc[3].key (:authority) == ":authority" match
**   s1   === expect tbl.dec[1].value == "custom-value"
**   c1   === expect tbl.enc[3].value == "www.example.com"
**** s1   EXPECT tbl.dec[1].value (custom-value) == "custom-value" match
**   s1   === expect tbl.dec[2].key == "cache-control"
**** c1   EXPECT tbl.enc[3].value (www.example.com) == "www.example.com" match
**   c1   === expect tbl.enc.size == 164
**** s1   EXPECT tbl.dec[2].key (cache-control) == "cache-control" match
**   s1   === expect tbl.dec[2].value == "no-cache"
**** c1   EXPECT tbl.enc.size (164) == "164" match
**** s1   EXPECT tbl.dec[2].value (no-cache) == "no-cache" match
**   s1   === expect tbl.dec[3].key == ":authority"
**   c1   === rxresp
**** s1   EXPECT tbl.dec[3].key (:authority) == ":authority" match
**   s1   === expect tbl.dec[3].value == "www.example.com"
**** s1   EXPECT tbl.dec[3].value (www.example.com) == "www.example.com" match
**   s1   === expect tbl.dec.size == 164
**** s1   EXPECT tbl.dec.size (164) == "164" match
**   s1   === txresp
***  s1   tx: stream: 5, type: HEADERS (1), flags: 0x05, size: 13
***  c1   rx: stream: 5, type: HEADERS (1), flags: 0x05, size: 13
***  c1   flag: END_STREAM
**   s1   Ending stream 5
**** c1   header[ 0]: :status : 200
**   c1   Ending stream 5
***  s1   shutting fd 5
**   s1   Ending
***  c1   closing fd 6
**   c1   Ending
**   top  === server s1 -wait
**   s1   Waiting for server (4/-1)
*    top  RESETTING after ./tests/a02009.vtc
*    top  TEST ./tests/a02009.vtc completed
#    top  TEST ./tests/a02009.vtc passed (0.030)
