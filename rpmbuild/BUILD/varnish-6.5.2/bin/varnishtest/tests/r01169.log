**** dT   0.000
*    top  TEST ./tests/r01169.vtc starting
**** top  extmacro def pwd=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest
**** top  extmacro def localhost=127.0.0.1
**** top  extmacro def bad_backend=127.0.0.1 38091
**** top  extmacro def bad_ip=192.0.2.255
**** top  extmacro def topbuild=/root/rpmbuild/BUILD/varnish-6.5.2
**** top  macro def testdir=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest/./tests
**** top  macro def tmpdir=/tmp/vtc.81510.568b40d7
**   top  === varnishtest "cli_limit *not* truncating full parameter listi...
*    top  VTEST cli_limit *not* truncating full parameter listing by default - #1169
**   top  === server s1 {
**   s1   Starting server
**** s1   macro def s1_addr=127.0.0.1
**** s1   macro def s1_port=38679
**** s1   macro def s1_sock=127.0.0.1 38679
*    s1   Listen on 127.0.0.1 38679
**   top  === varnish v1 -vcl+backend { }
**   s1   Started on 127.0.0.1 38679 (1 iterations)
**** dT   0.004
**   v1   Launch
***  v1   CMD: cd ${pwd} && exec varnishd  -d -n /tmp/vtc.81510.568b40d7/v1 -l 2m -p auto_restart=off -p syslog_cli_traffic=off -p sigsegv_handler=on -p thread_pool_min=10 -p debug=+vtc_mode -p vsl_mask=+Debug -a '127.0.0.1:0' -M '127.0.0.1 33431' -P /tmp/vtc.81510.568b40d7/v1/varnishd.pid -p vmod_path=/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_blob/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_cookie/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_std/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_vtc/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_unix/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_proxy/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_purge/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_directors/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_debug/.libs 
***  v1   CMD: cd /root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest && exec varnishd  -d -n /tmp/vtc.81510.568b40d7/v1 -l 2m -p auto_restart=off -p syslog_cli_traffic=off -p sigsegv_handler=on -p thread_pool_min=10 -p debug=+vtc_mode -p vsl_mask=+Debug -a '127.0.0.1:0' -M '127.0.0.1 33431' -P /tmp/vtc.81510.568b40d7/v1/varnishd.pid -p vmod_path=/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_blob/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_cookie/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_std/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_vtc/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_unix/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_proxy/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_purge/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_directors/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_debug/.libs 
***  v1   PID: 81546
**** v1   macro def v1_pid=81546
**** v1   macro def v1_name=/tmp/vtc.81510.568b40d7/v1
**** dT   0.013
***  v1   debug|Debug: Version: varnish-6.5.2 revision e7233b0ad2639043341819d19a8d2e418e94ce1b
***  v1   debug|Debug: Platform: Linux,5.3.18-59.24-default,x86_64,-jnone,-sdefault,-sdefault,-hcritbit
***  v1   debug|200 321     
***  v1   debug|-----------------------------
***  v1   debug|Varnish Cache CLI 1.0
***  v1   debug|-----------------------------
***  v1   debug|Linux,5.3.18-59.24-default,x86_64,-jnone,-sdefault,-sdefault,-hcritbit
***  v1   debug|varnish-6.5.2 revision e7233b0ad2639043341819d19a8d2e418e94ce1b
***  v1   debug|
***  v1   debug|Type 'help' for command list.
***  v1   debug|Type 'quit' to close CLI session.
***  v1   debug|Type 'start' to launch worker process.
***  v1   debug|
**** dT   0.111
**** v1   CLIPOLL 1 0x1 0x0
***  v1   CLI connection fd = 7
***  v1   CLI RX  107
**** v1   CLI RX|isklwkxmeqjaqhdhftyxsnqyfqybjujc
**** v1   CLI RX|
**** v1   CLI RX|Authentication required.
**** dT   0.112
**** v1   CLI TX|auth ba4a2e4a68353c4248001a5a41a98a85cc52618fee8bcae52bb4aa58f4c2a059
***  v1   CLI RX  200
**** v1   CLI RX|-----------------------------
**** v1   CLI RX|Varnish Cache CLI 1.0
**** v1   CLI RX|-----------------------------
**** v1   CLI RX|Linux,5.3.18-59.24-default,x86_64,-jnone,-sdefault,-sdefault,-hcritbit
**** v1   CLI RX|varnish-6.5.2 revision e7233b0ad2639043341819d19a8d2e418e94ce1b
**** v1   CLI RX|
**** v1   CLI RX|Type 'help' for command list.
**** v1   CLI RX|Type 'quit' to close CLI session.
**** v1   CLI RX|Type 'start' to launch worker process.
**** v1   CLI TX|vcl.inline vcl1 << %XJEIFLH|)Xspa8P
**** v1   CLI TX|vcl 4.1;
**** v1   CLI TX|backend s1 { .host = "127.0.0.1"; .port = "38679"; }
**** v1   CLI TX|
**** v1   CLI TX| 
**** v1   CLI TX|%XJEIFLH|)Xspa8P
**** dT   0.213
***  v1   vsl|No VSL chunk found (child not started ?)
**** dT   0.269
***  v1   CLI RX  200
**** v1   CLI RX|VCL compiled.
**** v1   CLI TX|vcl.use vcl1
***  v1   CLI RX  200
**   top  === varnish v1 -cliok "param.show -l"
**** v1   CLI TX|param.show -l
**** dT   0.271
***  v1   CLI RX  200
**** v1   CLI RX|accept_filter
**** v1   CLI RX|        Not available
**** v1   CLI RX|
**** v1   CLI RX|        This parameter depends on a feature which is not available on
**** v1   CLI RX|        this platform.
**** v1   CLI RX|
**** v1   CLI RX|acceptor_sleep_decay
**** v1   CLI RX|        Value is: 0.9 (default)
**** v1   CLI RX|        Minimum is: 0
**** v1   CLI RX|        Maximum is: 1
**** v1   CLI RX|
**** v1   CLI RX|        If we run out of resources, such as file descriptors or worker
**** v1   CLI RX|        threads, the acceptor will sleep between accepts.
**** v1   CLI RX|        This parameter (multiplicatively) reduce the sleep duration for
**** v1   CLI RX|        each successful accept. (ie: 0.9 = reduce by 10%)
**** v1   CLI RX|
**** v1   CLI RX|        NB: We do not know yet if it is a good idea to change this
**** v1   CLI RX|        parameter, or if the default value is even sensible. Caution is
**** v1   CLI RX|        advised, and feedback is most welcome.
**** v1   CLI RX|
**** v1   CLI RX|acceptor_sleep_incr
**** v1   CLI RX|        Value is: 0.000 [seconds] (default)
**** v1   CLI RX|        Minimum is: 0.000
**** v1   CLI RX|        Maximum is: 1.000
**** v1   CLI RX|
**** v1   CLI RX|        If we run out of resources, such as file descriptors or worker
**** v1   CLI RX|        threads, the acceptor will sleep between accepts.
**** v1   CLI RX|        This parameter control how much longer we sleep, each time we
**** v1   CLI RX|        fail to accept a new connection.
**** v1   CLI RX|
**** v1   CLI RX|        NB: We do not know yet if it is a good idea to change this
**** v1   CLI RX|        parameter, or if the default value is even sensible. Caution is
**** v1   CLI RX|        advised, and feedback is most welcome.
**** v1   CLI RX|
**** v1   CLI RX|acceptor_sleep_max
**** v1   CLI RX|        Value is: 0.050 [seconds] (default)
**** v1   CLI RX|        Minimum is: 0.000
**** v1   CLI RX|        Maximum is: 10.000
**** v1   CLI RX|
**** v1   CLI RX|        If we run out of resources, such as file descriptors or worker
**** v1   CLI RX|        threads, the acceptor will sleep between accepts.
**** v1   CLI RX|        This parameter limits how long it can sleep between attempts to
**** v1   CLI RX|        accept new connections.
**** v1   CLI RX|
**** v1   CLI RX|        NB: We do not know yet if it is a good idea to change this
**** v1   CLI RX|        parameter, or if the default value is even sensible. Caution is
**** v1   CLI RX|        advised, and feedback is most welcome.
**** v1   CLI RX|
**** v1   CLI RX|auto_restart
**** v1   CLI RX|        Value is: off [bool]
**** v1   CLI RX|        Default is: on
**** v1   CLI RX|
**** v1   CLI RX|        Automatically restart the child/worker process if it dies.
**** v1   CLI RX|
**** v1   CLI RX|backend_idle_timeout
**** v1   CLI RX|        Value is: 60.000 [seconds] (default)
**** v1   CLI RX|        Minimum is: 1.000
**** v1   CLI RX|
**** v1   CLI RX|        Timeout before we close unused backend connections.
**** v1   CLI RX|
**** v1   CLI RX|backend_local_error_holddown
**** v1   CLI RX|        Value is: 10.000 [seconds] (default)
**** v1   CLI RX|        Minimum is: 0.000
**** v1   CLI RX|
**** v1   CLI RX|        When connecting to backends, certain error codes
**** v1   CLI RX|        (EADDRNOTAVAIL, EACCESS, EPERM) signal a local resource
**** v1   CLI RX|        shortage or configuration issue for which retrying connection
**** v1   CLI RX|        attempts may worsen the situation due to the complexity of the
**** v1   CLI RX|        operations involved in the kernel.
**** v1   CLI RX|        This parameter prevents repeated connection attempts for the
**** v1   CLI RX|        configured duration.
**** v1   CLI RX|
**** v1   CLI RX|        NB: We do not know yet if it is a good idea to change this
**** v1   CLI RX|        parameter, or if the default value is even sensible. Caution is
**** v1   CLI RX|        advised, and feedback is most welcome.
**** v1   CLI RX|
**** v1   CLI RX|backend_remote_error_holddown
**** v1   CLI RX|        Value is: 0.250 [seconds] (default)
**** v1   CLI RX|        Minimum is: 0.000
**** v1   CLI RX|
**** v1   CLI RX|        When connecting to backends, certain error codes (ECONNREFUSED,
**** v1   CLI RX|        ENETUNREACH) signal fundamental connection issues such as the
**** v1   CLI RX|        backend not accepting connections or routing problems for which
**** v1   CLI RX|        repeated connection attempts are considered useless
**** v1   CLI RX|        This parameter prevents repeated connection attempts for the
**** v1   CLI RX|        configured duration.
**** v1   CLI RX|
**** v1   CLI RX|        NB: We do not know yet if it is a good idea to change this
**** v1   CLI RX|        parameter, or if the default value is even sensible. Caution is
**** v1   CLI RX|        advised, and feedback is most welcome.
**** v1   CLI RX|
**** v1   CLI RX|ban_cutoff
**** v1   CLI RX|        Value is: 0 [bans] (default)
**** v1   CLI RX|        Minimum is: 0
**** v1   CLI RX|
**** v1   CLI RX|        Expurge long tail content from the cache to keep the number of
**** v1   CLI RX|        bans below this value. 0 disables.
**** v1   CLI RX|
**** v1   CLI RX|        When this parameter is set to a non-zero value, the ban lurker
**** v1   CLI RX|        continues to work the ban list as usual top to bottom, but when
**** v1   CLI RX|        it reaches the ban_cutoff-th ban, it treats all objects as if
**** v1   CLI RX|        they matched a ban and expurges them from cache. As actively
**** v1   CLI RX|        used objects get tested against the ban list at request time
**** v1   CLI RX|        and thus are likely to be associated with bans near the top of
**** v1   CLI RX|        the ban list, with ban_cutoff, least recently accessed objects
**** v1   CLI RX|        (the "long tail") are removed.
**** v1   CLI RX|
**** v1   CLI RX|        This parameter is a safety net to avoid bad response times due
**** v1   CLI RX|        to bans being tested at lookup time. Setting a cutoff trades
**** v1   CLI RX|        response time for cache efficiency. The recommended value is
**** v1   CLI RX|        proportional to rate(bans_lurker_tests_tested) / n_objects
**** v1   CLI RX|        while the ban lurker is working, which is the number of bans
**** v1   CLI RX|        the system can sustain. The additional latency due to request
**** v1   CLI RX|        ban testing is in the order of ban_cutoff /
**** v1   CLI RX|        rate(bans_lurker_tests_tested). For example, for
**** v1   CLI RX|        rate(bans_lurker_tests_tested) = 2M/s and a tolerable latency
**** v1   CLI RX|        of 100ms, a good value for ban_cutoff may be 200K.
**** v1   CLI RX|
**** v1   CLI RX|        NB: We do not know yet if it is a good idea to change this
**** v1   CLI RX|        parameter, or if the default value is even sensible. Caution is
**** v1   CLI RX|        advised, and feedback is most welcome.
**** v1   CLI RX|
**** v1   CLI RX|ban_dups
**** v1   CLI RX|        Value is: on [bool] (default)
**** v1   CLI RX|
**** v1   CLI RX|        Eliminate older identical bans when a new ban is added.  This
**** v1   CLI RX|        saves CPU cycles by not comparing objects to identical bans.
**** v1   CLI RX|        This is a waste of time if you have many bans which are never
**** v1   CLI RX|        identical.
**** v1   CLI RX|
**** v1   CLI RX|ban_lurker_age
**** v1   CLI RX|        Value is: 60.000 [seconds] (default)
**** v1   CLI RX|        Minimum is: 0.000
**** v1   CLI RX|
**** v1   CLI RX|        The ban lurker will ignore bans until they are this old.  When
**** v1   CLI RX|        a ban is added, the active traffic will be tested against it as
**** v1   CLI RX|        part of object lookup.  Because many applications issue bans in
**** v1   CLI RX|        bursts, this parameter holds the ban-lurker off until the rush
**** v1   CLI RX|        is over.
**** v1   CLI RX|        This should be set to the approximate time which a ban-burst
**** v1   CLI RX|        takes.
**** v1   CLI RX|
**** v1   CLI RX|ban_lurker_batch
**** v1   CLI RX|        Value is: 1000 (default)
**** v1   CLI RX|        Minimum is: 1
**** v1   CLI RX|
**** v1   CLI RX|        The ban lurker sleeps ${ban_lurker_sleep} after examining this
**** v1   CLI RX|        many objects.  Use this to pace the ban-lurker if it eats too
**** v1   CLI RX|        many resources.
**** v1   CLI RX|
**** v1   CLI RX|ban_lurker_holdoff
**** v1   CLI RX|        Value is: 0.010 [seconds] (default)
**** v1   CLI RX|        Minimum is: 0.000
**** v1   CLI RX|
**** v1   CLI RX|        How long the ban lurker sleeps when giving way to lookup due to
**** v1   CLI RX|        lock contention.
**** v1   CLI RX|
**** v1   CLI RX|        NB: We do not know yet if it is a good idea to change this
**** v1   CLI RX|        parameter, or if the default value is even sensible. Caution is
**** v1   CLI RX|        advised, and feedback is most welcome.
**** v1   CLI RX|
**** v1   CLI RX|ban_lurker_sleep
**** v1   CLI RX|        Value is: 0.010 [seconds] (default)
**** v1   CLI RX|        Minimum is: 0.000
**** v1   CLI RX|
**** v1   CLI RX|        How long the ban lurker sleeps after examining
**** v1   CLI RX|        ${ban_lurker_batch} objects.  Use this to pace the ban-lurker
**** v1   CLI RX|        if it eats too many resources.
**** v1   CLI RX|        A value of zero will disable the ban lurker entirely.
**** v1   CLI RX|
**** v1   CLI RX|between_bytes_timeout
**** v1   CLI RX|        Value is: 60.000 [seconds] (default)
**** v1   CLI RX|        Minimum is: 0.000
**** v1   CLI RX|
**** v1   CLI RX|        We only wait for this many seconds between bytes received from
**** v1   CLI RX|        the backend before giving up the fetch.
**** v1   CLI RX|        VCL values, per backend or per backend request take precedence.
**** v1   CLI RX|        This parameter does not apply to pipe'ed requests.
**** v1   CLI RX|
**** v1   CLI RX|cc_command
**** v1   CLI RX|        Value is: exec gcc -O2 -g -m64 -fmessage-length=0 -D_FORTIFY_SOURCE=2 -fstack-protector -funwind-tables -fasynchronous-unwind-tables -fcommon -fstack-protector -Wno-error=clobbered -Werror=maybe-uninitialized -Wall -Werror -Wno-error=unused-result   -Werror  -Wno-format-y2k  -Wstrict-prototypes  -Wmissing-prototypes  -Wpointer-arith  -Wcast-qual  -Wwrite-strings  -Wshadow  -Wunused-parameter  -Wcast-align  -Wchar-subscripts  -Wnested-externs  -Wextra  -Wno-sign-compare  -fstack-protector -Wno-missing-field-initializers -pthread -fpic -shared -Wl,-x -o %o %s (default)
**** v1   CLI RX|
**** v1   CLI RX|        Command used for compiling the C source code to a dlopen(3)
**** v1   CLI RX|        loadable object.  Any occurrence of %s in the string will be
**** v1   CLI RX|        replaced with the source file name, and %o will be replaced
**** v1   CLI RX|        with the output file name.
**** v1   CLI RX|
**** v1   CLI RX|        NB: This parameter will not take any effect until the VCL
**** v1   CLI RX|        programs have been reloaded.
**** v1   CLI RX|
**** v1   CLI RX|cli_limit
**** v1   CLI RX|        Value is: 48k [bytes] (default)
**** v1   CLI RX|        Minimum is: 128b
**** v1   CLI RX|        Maximum is: 99999999b
**** v1   CLI RX|
**** v1   CLI RX|        Maximum size of CLI response.  If the response exceeds this
**** v1   CLI RX|        limit, the response code will be 201 instead of 200 and the
**** v1   CLI RX|        last line will in
**** v1   CLI RX| [...] (36387)
**   v1   CLI 200 <param.show -l>
*    top  RESETTING after ./tests/r01169.vtc
**** dT   0.272
**   s1   Waiting for server (4/-1)
**   v1   Wait
**** v1   CLI TX|backend.list
***  v1   CLI RX  101
**** v1   CLI RX|Unknown request in manager process (child not running).
**** v1   CLI RX|Type 'help' for more info.
**   v1   Stop
**** v1   CLI TX|stop
***  v1   CLI RX  300
**** v1   CLI RX|Child in state stopped
***  v1   wait-stopped
**** v1   CLI TX|status
***  v1   CLI RX  200
**** v1   CLI RX|Child in state stopped
**** v1   CLI TX|panic.clear
***  v1   CLI RX  300
**** v1   CLI RX|No panic to clear
***  v1   debug|Info: manager stopping child
***  v1   debug|Info: manager dies
**** dT   0.273
**** v1   STDOUT EOF
**** dT   0.313
***  v1   vsl|No VSL chunk found (child not started ?)
**   v1   WAIT4 pid=81546 status=0x0000 (user 0.136312 sys 0.029369)
*    top  TEST ./tests/r01169.vtc completed
#    top  TEST ./tests/r01169.vtc passed (0.314)
