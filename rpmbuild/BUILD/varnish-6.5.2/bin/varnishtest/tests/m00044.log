**** dT   0.000
*    top  TEST ./tests/m00044.vtc starting
**** top  extmacro def pwd=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest
**** top  extmacro def localhost=127.0.0.1
**** top  extmacro def bad_backend=127.0.0.1 45109
**** top  extmacro def bad_ip=192.0.2.255
**** top  extmacro def topbuild=/root/rpmbuild/BUILD/varnish-6.5.2
**** top  macro def testdir=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest/./tests
**** top  macro def tmpdir=/tmp/vtc.71695.2c11cfa9
**   top  === varnishtest "VMOD blob test all examples from the vcc/rst"
*    top  VTEST VMOD blob test all examples from the vcc/rst
**   top  === server s1 {
**   s1   Starting server
**** dT   0.001
**** s1   macro def s1_addr=127.0.0.1
**** s1   macro def s1_port=41413
**** s1   macro def s1_sock=127.0.0.1 41413
*    s1   Listen on 127.0.0.1 41413
**   top  === varnish v1 -arg "-p http_max_hdr=128" -vcl+backend {
**   s1   Started on 127.0.0.1 41413 (1 iterations)
**** dT   0.007
**   v1   Launch
***  v1   CMD: cd ${pwd} && exec varnishd  -d -n /tmp/vtc.71695.2c11cfa9/v1 -l 2m -p auto_restart=off -p syslog_cli_traffic=off -p sigsegv_handler=on -p thread_pool_min=10 -p debug=+vtc_mode -p vsl_mask=+Debug -a '127.0.0.1:0' -M '127.0.0.1 33859' -P /tmp/vtc.71695.2c11cfa9/v1/varnishd.pid -p vmod_path=/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_blob/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_cookie/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_std/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_vtc/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_unix/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_proxy/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_purge/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_directors/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_debug/.libs  -p http_max_hdr=128
***  v1   CMD: cd /root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest && exec varnishd  -d -n /tmp/vtc.71695.2c11cfa9/v1 -l 2m -p auto_restart=off -p syslog_cli_traffic=off -p sigsegv_handler=on -p thread_pool_min=10 -p debug=+vtc_mode -p vsl_mask=+Debug -a '127.0.0.1:0' -M '127.0.0.1 33859' -P /tmp/vtc.71695.2c11cfa9/v1/varnishd.pid -p vmod_path=/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_blob/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_cookie/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_std/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_vtc/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_unix/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_proxy/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_purge/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_directors/.libs:/root/rpmbuild/BUILD/varnish-6.5.2/lib/libvmod_debug/.libs  -p http_max_hdr=128
***  v1   PID: 71717
**** v1   macro def v1_pid=71717
**** v1   macro def v1_name=/tmp/vtc.71695.2c11cfa9/v1
**** dT   0.015
***  v1   debug|Debug: Version: varnish-6.5.2 revision e7233b0ad2639043341819d19a8d2e418e94ce1b
***  v1   debug|Debug: Platform: Linux,5.3.18-59.24-default,x86_64,-jnone,-sdefault,-sdefault,-hcritbit
***  v1   debug|200 321     
***  v1   debug|-----------------------------
***  v1   debug|Varnish Cache CLI 1.0
***  v1   debug|-----------------------------
***  v1   debug|Linux,5.3.18-59.24-default,x86_64,-jnone,-sdefault,-sdefault,-hcritbit
***  v1   debug|varnish-6.5.2 revision e7233b0ad2639043341819d19a8d2e418e94ce1b
***  v1   debug|
***  v1   debug|Type 'help' for command list.
***  v1   debug|Type 'quit' to close CLI session.
***  v1   debug|Type 'start' to launch worker process.
***  v1   debug|
**** dT   0.113
**** v1   CLIPOLL 1 0x1 0x0
***  v1   CLI connection fd = 7
***  v1   CLI RX  107
**** v1   CLI RX|ywakqirjsemhipcbfspzyiasvytmbdsk
**** v1   CLI RX|
**** v1   CLI RX|Authentication required.
**** v1   CLI TX|auth e04502ee550ef47df50acd5d8f8e6034d0f49551e5c0d0cd255d4c1b48ab3924
**** dT   0.114
***  v1   CLI RX  200
**** v1   CLI RX|-----------------------------
**** v1   CLI RX|Varnish Cache CLI 1.0
**** v1   CLI RX|-----------------------------
**** v1   CLI RX|Linux,5.3.18-59.24-default,x86_64,-jnone,-sdefault,-sdefault,-hcritbit
**** v1   CLI RX|varnish-6.5.2 revision e7233b0ad2639043341819d19a8d2e418e94ce1b
**** v1   CLI RX|
**** v1   CLI RX|Type 'help' for command list.
**** v1   CLI RX|Type 'quit' to close CLI session.
**** v1   CLI RX|Type 'start' to launch worker process.
**** v1   CLI TX|vcl.inline vcl1 << %XJEIFLH|)Xspa8P
**** v1   CLI TX|vcl 4.1;
**** v1   CLI TX|backend s1 { .host = "127.0.0.1"; .port = "41413"; }
**** v1   CLI TX|
**** v1   CLI TX|
**** v1   CLI TX|    import blob;
**** v1   CLI TX|    import std;
**** v1   CLI TX|
**** v1   CLI TX|    ############################################################
**** v1   CLI TX|    # top Usage section
**** v1   CLI TX|    sub vcl_init {
**** v1   CLI TX|\t# Create blob objects from encodings such as base64 or hex.
**** v1   CLI TX|\tnew myblob   = blob.blob(BASE64, "Zm9vYmFy");
**** v1   CLI TX|\tnew yourblob = blob.blob(encoded="666F6F", decoding=HEX);
**** v1   CLI TX|    }
**** v1   CLI TX|
**** v1   CLI TX|    sub vcl_deliver {
**** v1   CLI TX|\t# The .get() method retrieves the BLOB from an object.
**** v1   CLI TX|\tset resp.http.MyBlob-As-Hex
**** v1   CLI TX|\t    = blob.encode(blob=myblob.get(), encoding=HEX);
**** v1   CLI TX|
**** v1   CLI TX|\t# The .encode() method efficiently retrieves an encoding.
**** v1   CLI TX|\tset resp.http.YourBlob-As-Base64 = yourblob.encode(BASE64);
**** v1   CLI TX|
**** v1   CLI TX|\t# decode() and encode() functions convert blobs to text and
**** v1   CLI TX|\t# vice versa at runtime.
**** v1   CLI TX|\tset resp.http.Base64-Encoded
**** v1   CLI TX|\t    = blob.encode(BASE64,
**** v1   CLI TX|\t\t\t  blob=blob.decode(HEX, encoded=req.http.Hex-Encoded));
**** v1   CLI TX|    }
**** v1   CLI TX|
**** v1   CLI TX|    sub vcl_recv {
**** v1   CLI TX|\t# transcode() converts from one encoding to another.
**** v1   CLI TX|\tset req.http.Hex-Encoded
**** v1   CLI TX|\t    = blob.transcode(decoding=BASE64, encoding=HEX, case=UPPER,
**** v1   CLI TX|\t\t\t     encoded="YmF6");
**** v1   CLI TX|
**** v1   CLI TX|\t# transcode() can replace other specific encoding/deconding
**** v1   CLI TX|\t# vmods - e.g. vmod_urlcode
**** v1   CLI TX|\tset req.url = blob.transcode(encoded=req.url, decoding=URL);
**** v1   CLI TX|\tset req.http.url_urlcoded
**** v1   CLI TX|\t    = blob.transcode(encoded=req.url, encoding=URL);
**** v1   CLI TX|    }
**** v1   CLI TX|    # get output from recv
**** v1   CLI TX|    sub vcl_deliver {
**** v1   CLI TX|\tset resp.http.url_urlcoded = req.http.url_urlcoded;
**** v1   CLI TX|    }
**** v1   CLI TX|
**** v1   CLI TX|    ############################################################
**** v1   CLI TX|    # IDENTITY
**** v1   CLI TX|    sub vcl_deliver {
**** v1   CLI TX|\tset resp.http.Trunced-Foo1
**** v1   CLI TX|\t    = blob.encode(IDENTITY, blob=blob.decode(HEX,
**** v1   CLI TX|\t\t\t\t\t\t     encoded="666f6f00626172"));
**** v1   CLI TX|\tset resp.http.Trunced-Foo2
**** v1   CLI TX|\t    = blob.encode(blob=blob.decode(HEX, encoded="666f6f00626172"));
**** v1   CLI TX|    }
**** v1   CLI TX|
**** v1   CLI TX|    ############################################################
**** v1   CLI TX|    # HEX
**** v1   CLI TX|    sub vcl_deliver {
**** v1   CLI TX|\tset resp.http.First = "abc";
**** v1   CLI TX|\tset resp.http.Second = "def0";
**** v1   CLI TX|\tset resp.http.Hex-Decoded = blob.encode(
**** v1   CLI TX|\t    HEX,
**** v1   CLI TX|\t    blob=blob.decode(HEX, encoded=resp.http.First + resp.http.Second));
**** v1   CLI TX|    }
**** v1   CLI TX|
**** v1   CLI TX|    ############################################################
**** v1   CLI TX|    # encode - also contains decode examples
**** v1   CLI TX|    sub vcl_deliver {
**** v1   CLI TX|\tset resp.http.encode1
**** v1   CLI TX|\t    = blob.encode(HEX, blob=blob.decode(BASE64,
**** v1   CLI TX|\t\t\t\t\t\tencoded="Zm9vYmFyYmF6"));
**** v1   CLI TX|
**** v1   CLI TX|\t# same with named parameters
**** v1   CLI TX|\tset resp.http.encode2
**** v1   CLI TX|\t    = blob.encode(blob=blob.decode(encoded="Zm9vYmFyYmF6",
**** v1   CLI TX|\t\t\t\t\t\t   decoding=BASE64),
**** v1   CLI TX|\t\t\t      encoding=HEX);
**** v1   CLI TX|
**** v1   CLI TX|\t# convert blob to string
**** v1   CLI TX|\tset resp.http.encode3
**** v1   CLI TX|\t    = blob.encode(blob=blob.decode(encoded="foo"));
**** v1   CLI TX|    }
**** v1   CLI TX|
**** v1   CLI TX|    ############################################################
**** v1   CLI TX|    # transcode
**** v1   CLI TX|    sub vcl_deliver {
**** v1   CLI TX|\tset resp.http.Hex2Base64-1
**** v1   CLI TX|\t    = blob.transcode(HEX, BASE64, encoded="666f6f");
**** v1   CLI TX|
**** v1   CLI TX|\t# same with named parameters
**** v1   CLI TX|\tset resp.http.Hex2Base64-2
**** v1   CLI TX|\t    = blob.transcode(encoded="666f6f",
**** v1   CLI TX|\t\t\t\t encoding=BASE64, decoding=HEX);
**** v1   CLI TX|
**** v1   CLI TX|\t# replacement for urlcode.decode("foo%20bar")
**** v1   CLI TX|\tset resp.http.urldecoded
**** v1   CLI TX|\t    = blob.transcode(encoded="foo%20bar", decoding=URL);
**** v1   CLI TX|
**** v1   CLI TX|\t# replacement for urlcode.encode("foo bar")
**** v1   CLI TX|\tset resp.http.urlencoded
**** v1   CLI TX|\t    = blob.transcode(encoded="foo bar", encoding=URL);
**** v1   CLI TX|    }
**** v1   CLI TX|
**** v1   CLI TX|    ############################################################
**** v1   CLI TX|    # blob init + .get + .encode
**** v1   CLI TX|    sub vcl_init {
**** v1   CLI TX|\tnew theblob1 = blob.blob(BASE64, encoded="YmxvYg==");
**** v1   CLI TX|
**** v1   CLI TX|\t# same with named arguments
**** v1   CLI TX|\tnew theblob2 = blob.blob(encoded="YmxvYg==", decoding=BASE64);
**** v1   CLI TX|
**** v1   CLI TX|\t# string as a blob
**** v1   CLI TX|\tnew stringblob = blob.blob(encoded="bazz");
**** v1   CLI TX|    }
**** v1   CLI TX|    sub vcl_deliver {
**** v1   CLI TX|\t# .get
**** v1   CLI TX|\tset resp.http.The-Blob1 =
**** v1   CLI TX|\t    blob.encode(blob=theblob1.get());
**** v1   CLI TX|
**** v1   CLI TX|\tset resp.http.The-Blob2 =
**** v1   CLI TX|\t    blob.encode(blob=theblob2.get());
**** v1   CLI TX|
**** v1   CLI TX|\tset resp.http.The-Stringblob =
**** v1   CLI TX|\t    blob.encode(blob=stringblob.get());
**** v1   CLI TX|
**** v1   CLI TX|\t# .encode
**** v1   CLI TX|
**** v1   CLI TX|\t# blob as text
**** v1   CLI TX|\tset resp.http.The-Blob = theblob1.encode();
**** v1   CLI TX|
**** v1   CLI TX|\t# blob as base64
**** v1   CLI TX|\tset resp.http.The-Blob-b64 = theblob1.encode(BASE64);
**** v1   CLI TX|    }
**** v1   CLI TX|
**** v1   CLI TX|
**** v1   CLI TX|%XJEIFLH|)Xspa8P
**** dT   0.214
***  v1   vsl|No VSL chunk found (child not started ?)
**** dT   0.314
***  v1   vsl|No VSL chunk found (child not started ?)
**** dT   0.319
***  v1   CLI RX  200
**** v1   CLI RX|VCL compiled.
**** v1   CLI TX|vcl.use vcl1
***  v1   CLI RX  200
**   v1   Start
**** v1   CLI TX|start
**** dT   0.322
***  v1   debug|Debug: Child (71771) Started
**** dT   0.348
***  v1   CLI RX  200
***  v1   wait-running
**** v1   CLI TX|status
***  v1   debug|Info: Child (71771) said Child starts
***  v1   CLI RX  200
**** v1   CLI RX|Child in state running
**** v1   CLI TX|debug.listen_address
***  v1   CLI RX  200
**** v1   CLI RX|127.0.0.1 44643
**** v1   CLI TX|debug.xid 999
***  v1   CLI RX  200
**** v1   CLI RX|XID is 999
**** v1   CLI TX|debug.listen_address
***  v1   CLI RX  200
**** v1   CLI RX|127.0.0.1 44643
**   v1   Listen on 127.0.0.1 44643
**** v1   macro def v1_addr=127.0.0.1
**** v1   macro def v1_port=44643
**** v1   macro def v1_sock=127.0.0.1 44643
**** dT   0.414
**** v1   vsl|          0 CLI             - Rd vcl.load "vcl1" vcl_vcl1.1634892890.053940/vgc.so 1auto
**** v1   vsl|          0 CLI             - Wr 200 52 Loaded "vcl_vcl1.1634892890.053940/vgc.so" as "vcl1"
**** v1   vsl|          0 CLI             - Rd vcl.use "vcl1"
**** v1   vsl|          0 CLI             - Wr 200 0 
**** v1   vsl|          0 CLI             - Rd start
**** v1   vsl|          0 CLI             - Wr 200 0 
**** v1   vsl|          0 CLI             - Rd debug.listen_address 
**** v1   vsl|          0 CLI             - Wr 200 16 127.0.0.1 44643

**** v1   vsl|          0 CLI             - Rd debug.xid 999 
**** v1   vsl|          0 CLI             - Wr 200 10 XID is 999
**** v1   vsl|          0 CLI             - Rd debug.listen_address 
**** v1   vsl|          0 CLI             - Wr 200 16 127.0.0.1 44643

**** dT   0.448
**   top  === client c1 {
**   c1   Starting client
**** dT   0.449
**   c1   Waiting for client
**   c1   Started on 127.0.0.1 44643 (1 iterations)
***  c1   Connect to 127.0.0.1 44643
***  c1   connected fd 17 from 127.0.0.1 39742 to 127.0.0.1 44643
**   c1   === txreq -url "/foo%20bar"
**** c1   txreq|GET /foo%20bar HTTP/1.1\r
**** c1   txreq|Host: 127.0.0.1\r
**** c1   txreq|\r
**   c1   === rxresp
***  s1   accepted fd 5 127.0.0.1 33848
**   s1   === rxreq
**** dT   0.450
**** s1   rxhdr|GET /foo bar HTTP/1.1\r
**** s1   rxhdr|X-Forwarded-For: 127.0.0.1\r
**** s1   rxhdr|Hex-Encoded: 62617A\r
**** s1   rxhdr|url_urlcoded: %2ffoo%20bar\r
**** s1   rxhdr|host: 127.0.0.1\r
**** s1   rxhdr|Accept-Encoding: gzip\r
**** s1   rxhdr|X-Varnish: 1002\r
**** s1   rxhdr|\r
**** s1   rxhdrlen = 159
**** s1   http[ 0] |GET
**** s1   http[ 1] |/foo
**** s1   http[ 2] |bar HTTP/1.1
**** s1   http[ 3] |X-Forwarded-For: 127.0.0.1
**** s1   http[ 4] |Hex-Encoded: 62617A
**** s1   http[ 5] |url_urlcoded: %2ffoo%20bar
**** s1   http[ 6] |host: 127.0.0.1
**** s1   http[ 7] |Accept-Encoding: gzip
**** s1   http[ 8] |X-Varnish: 1002
**** s1   bodylen = 0
**   s1   === txresp
**** s1   txresp|HTTP/1.1 200 OK\r
**** s1   txresp|Content-Length: 0\r
**** s1   txresp|\r
***  s1   shutting fd 5
**   s1   Ending
**** dT   0.462
**** c1   rxhdr|HTTP/1.1 200 OK\r
**** c1   rxhdr|Content-Length: 0\r
**** c1   rxhdr|Date: Fri, 22 Oct 2021 08:54:50 GMT\r
**** c1   rxhdr|X-Varnish: 1001\r
**** c1   rxhdr|Age: 0\r
**** c1   rxhdr|Via: 1.1 varnish (Varnish/6.5)\r
**** c1   rxhdr|MyBlob-As-Hex: 666f6f626172\r
**** c1   rxhdr|YourBlob-As-Base64: Zm9v\r
**** c1   rxhdr|Base64-Encoded: YmF6\r
**** c1   rxhdr|url_urlcoded: %2ffoo%20bar\r
**** c1   rxhdr|Trunced-Foo1: foo\r
**** c1   rxhdr|Trunced-Foo2: foo\r
**** c1   rxhdr|First: abc\r
**** c1   rxhdr|Second: def0\r
**** c1   rxhdr|Hex-Decoded: 0abcdef0\r
**** c1   rxhdr|encode1: 666f6f62617262617a\r
**** c1   rxhdr|encode2: 666f6f62617262617a\r
**** c1   rxhdr|encode3: foo\r
**** c1   rxhdr|Hex2Base64-1: Zm9v\r
**** c1   rxhdr|Hex2Base64-2: Zm9v\r
**** c1   rxhdr|urldecoded: foo bar\r
**** c1   rxhdr|urlencoded: foo%20bar\r
**** c1   rxhdr|The-Blob1: blob\r
**** c1   rxhdr|The-Blob2: blob\r
**** c1   rxhdr|The-Stringblob: bazz\r
**** c1   rxhdr|The-Blob: blob\r
**** c1   rxhdr|The-Blob-b64: YmxvYg==\r
**** c1   rxhdr|Accept-Ranges: bytes\r
**** c1   rxhdr|Connection: keep-alive\r
**** c1   rxhdr|\r
**** c1   rxhdrlen = 622
**** c1   http[ 0] |HTTP/1.1
**** c1   http[ 1] |200
**** c1   http[ 2] |OK
**** c1   http[ 3] |Content-Length: 0
**** c1   http[ 4] |Date: Fri, 22 Oct 2021 08:54:50 GMT
**** c1   http[ 5] |X-Varnish: 1001
**** c1   http[ 6] |Age: 0
**** c1   http[ 7] |Via: 1.1 varnish (Varnish/6.5)
**** c1   http[ 8] |MyBlob-As-Hex: 666f6f626172
**** c1   http[ 9] |YourBlob-As-Base64: Zm9v
**** c1   http[10] |Base64-Encoded: YmF6
**** c1   http[11] |url_urlcoded: %2ffoo%20bar
**** c1   http[12] |Trunced-Foo1: foo
**** c1   http[13] |Trunced-Foo2: foo
**** c1   http[14] |First: abc
**** c1   http[15] |Second: def0
**** c1   http[16] |Hex-Decoded: 0abcdef0
**** c1   http[17] |encode1: 666f6f62617262617a
**** c1   http[18] |encode2: 666f6f62617262617a
**** c1   http[19] |encode3: foo
**** c1   http[20] |Hex2Base64-1: Zm9v
**** c1   http[21] |Hex2Base64-2: Zm9v
**** c1   http[22] |urldecoded: foo bar
**** c1   http[23] |urlencoded: foo%20bar
**** c1   http[24] |The-Blob1: blob
**** c1   http[25] |The-Blob2: blob
**** c1   http[26] |The-Stringblob: bazz
**** c1   http[27] |The-Blob: blob
**** c1   http[28] |The-Blob-b64: YmxvYg==
**** c1   http[29] |Accept-Ranges: bytes
**** c1   http[30] |Connection: keep-alive
**** c1   bodylen = 0
**   c1   === expect resp.status == 200
**** c1   EXPECT resp.status (200) == "200" match
**   c1   === expect resp.http.MyBlob-As-Hex == "666f6f626172"
**** c1   EXPECT resp.http.MyBlob-As-Hex (666f6f626172) == "666f6f626172" match
**   c1   === expect resp.http.YourBlob-As-Base64 == "Zm9v"
**** c1   EXPECT resp.http.YourBlob-As-Base64 (Zm9v) == "Zm9v" match
**   c1   === expect resp.http.Base64-Encoded == "YmF6"
**** c1   EXPECT resp.http.Base64-Encoded (YmF6) == "YmF6" match
**   c1   === expect resp.http.url_urlcoded == "%2ffoo%20bar"
**** c1   EXPECT resp.http.url_urlcoded (%2ffoo%20bar) == "%2ffoo%20bar" match
**   c1   === expect resp.http.Trunced-Foo1 == "foo"
**** c1   EXPECT resp.http.Trunced-Foo1 (foo) == "foo" match
**   c1   === expect resp.http.Trunced-Foo2 == "foo"
**** c1   EXPECT resp.http.Trunced-Foo2 (foo) == "foo" match
**   c1   === expect resp.http.First == "abc"
**** c1   EXPECT resp.http.First (abc) == "abc" match
**   c1   === expect resp.http.Second == "def0"
**** c1   EXPECT resp.http.Second (def0) == "def0" match
**   c1   === expect resp.http.Hex-Decoded == "0abcdef0"
**** c1   EXPECT resp.http.Hex-Decoded (0abcdef0) == "0abcdef0" match
**   c1   === expect resp.http.encode1 == "666f6f62617262617a"
**** c1   EXPECT resp.http.encode1 (666f6f62617262617a) == "666f6f62617262617a" match
**   c1   === expect resp.http.encode2 == "666f6f62617262617a"
**** c1   EXPECT resp.http.encode2 (666f6f62617262617a) == "666f6f62617262617a" match
**   c1   === expect resp.http.encode3 == "foo"
**** c1   EXPECT resp.http.encode3 (foo) == "foo" match
**   c1   === expect resp.http.Hex2Base64-1 == "Zm9v"
**** dT   0.463
**** c1   EXPECT resp.http.Hex2Base64-1 (Zm9v) == "Zm9v" match
**   c1   === expect resp.http.Hex2Base64-2 == "Zm9v"
**** c1   EXPECT resp.http.Hex2Base64-2 (Zm9v) == "Zm9v" match
**   c1   === expect resp.http.urldecoded == "foo bar"
**** c1   EXPECT resp.http.urldecoded (foo bar) == "foo bar" match
**   c1   === expect resp.http.urlencoded == "foo%20bar"
**** c1   EXPECT resp.http.urlencoded (foo%20bar) == "foo%20bar" match
**   c1   === expect resp.http.The-Blob1 == "blob"
**** c1   EXPECT resp.http.The-Blob1 (blob) == "blob" match
**   c1   === expect resp.http.The-Blob2 == "blob"
**** c1   EXPECT resp.http.The-Blob2 (blob) == "blob" match
**   c1   === expect resp.http.The-Stringblob == "bazz"
**** c1   EXPECT resp.http.The-Stringblob (bazz) == "bazz" match
**   c1   === expect resp.http.The-Blob == "blob"
**** c1   EXPECT resp.http.The-Blob (blob) == "blob" match
**   c1   === expect resp.http.The-Blob-b64 == "YmxvYg=="
**** c1   EXPECT resp.http.The-Blob-b64 (YmxvYg==) == "YmxvYg==" match
***  c1   closing fd 17
**   c1   Ending
*    top  RESETTING after ./tests/m00044.vtc
**   s1   Waiting for server (4/-1)
**   v1   Wait
**** v1   CLI TX|backend.list
***  v1   CLI RX  200
**** v1   CLI RX|Backend name   Admin      Probe    Health     Last change
**** v1   CLI RX|vcl1.s1        healthy    0/0      healthy    Fri, 22 Oct 2021 08:54:50 GMT
**   v1   Stop
**** v1   CLI TX|stop
***  v1   debug|Debug: Stopping Child
**** dT   0.514
**** v1   vsl|       1000 Begin           c sess 0 HTTP/1
**** v1   vsl|       1000 SessOpen        c 127.0.0.1 39742 a0 127.0.0.1 44643 1634892890.388810 25
**** v1   vsl|       1000 Link            c req 1001 rxreq
**** v1   vsl|       1002 Begin           b bereq 1001 fetch
**** v1   vsl|       1002 VCL_use         b vcl1
**** v1   vsl|       1002 Timestamp       b Start: 1634892890.388999 0.000000 0.000000
**** v1   vsl|       1002 BereqMethod     b GET
**** v1   vsl|       1002 BereqURL        b /foo bar
**** v1   vsl|       1002 BereqProtocol   b HTTP/1.1
**** v1   vsl|       1002 BereqHeader     b X-Forwarded-For: 127.0.0.1
**** v1   vsl|       1002 BereqHeader     b Hex-Encoded: 62617A
**** v1   vsl|       1002 BereqHeader     b url_urlcoded: %2ffoo%20bar
**** v1   vsl|       1002 BereqHeader     b host: 127.0.0.1
**** v1   vsl|       1002 BereqHeader     b Accept-Encoding: gzip
**** v1   vsl|       1002 BereqHeader     b X-Varnish: 1002
**** v1   vsl|       1002 VCL_call        b BACKEND_FETCH
**** dT   0.515
**** v1   vsl|       1002 VCL_return      b fetch
**** v1   vsl|       1002 BackendOpen     b 28 s1 127.0.0.1 41413 127.0.0.1 33848 connect
**** v1   vsl|       1002 Timestamp       b Bereq: 1634892890.389196 0.000197 0.000197
**** v1   vsl|       1002 Timestamp       b Beresp: 1634892890.389925 0.000926 0.000728
**** v1   vsl|       1002 BerespProtocol  b HTTP/1.1
**** v1   vsl|       1002 BerespStatus    b 200
**** v1   vsl|       1002 BerespReason    b OK
**** v1   vsl|       1002 BerespHeader    b Content-Length: 0
**** v1   vsl|       1002 BerespHeader    b Date: Fri, 22 Oct 2021 08:54:50 GMT
**** v1   vsl|       1002 TTL             b RFC 120 10 0 1634892890 1634892890 1634892890 0 0 cacheable
**** v1   vsl|       1002 VCL_call        b BACKEND_RESPONSE
**** v1   vsl|       1002 VCL_return      b deliver
**** v1   vsl|       1002 Filters         b 
**** v1   vsl|       1002 Storage         b malloc s0
**** v1   vsl|       1002 Fetch_Body      b 0 none -
**** v1   vsl|       1002 BackendClose    b 28 s1 recycle
**** v1   vsl|       1002 Timestamp       b BerespBody: 1634892890.400124 0.011124 0.010198
**** v1   vsl|       1002 Length          b 0
**** v1   vsl|       1002 BereqAcct       b 159 0 159 38 0 38
**** v1   vsl|       1002 End             b 
**** v1   vsl|          0 ExpKill         - EXP_Inbox flg=1e p=0x7fd000010fb0 e=0.000000 f=0x0
**** v1   vsl|          0 ExpKill         - EXP_When p=0x7fd000010fb0 e=1634893020.389925 f=0x1e
**** v1   vsl|          0 ExpKill         - EXP_expire p=0x7fd000010fb0 e=129.989775 f=0x0
**** v1   vsl|       1001 Begin           c req 1000 rxreq
**** v1   vsl|       1001 Timestamp       c Start: 1634892890.388897 0.000000 0.000000
**** v1   vsl|       1001 Timestamp       c Req: 1634892890.388897 0.000000 0.000000
**** v1   vsl|       1001 VCL_use         c vcl1
**** v1   vsl|       1001 ReqStart        c 127.0.0.1 39742 a0
**** v1   vsl|       1001 ReqMethod       c GET
**** v1   vsl|       1001 ReqURL          c /foo%20bar
**** v1   vsl|       1001 ReqProtocol     c HTTP/1.1
**** v1   vsl|       1001 ReqHeader       c Host: 127.0.0.1
**** v1   vsl|       1001 ReqHeader       c X-Forwarded-For: 127.0.0.1
**** v1   vsl|       1001 VCL_call        c RECV
**** v1   vsl|       1001 ReqHeader       c Hex-Encoded: 62617A
**** v1   vsl|       1001 ReqURL          c /foo bar
**** v1   vsl|       1001 ReqHeader       c url_urlcoded: %2ffoo%20bar
**** v1   vsl|       1001 ReqUnset        c Host: 127.0.0.1
**** v1   vsl|       1001 ReqHeader       c host: 127.0.0.1
**** v1   vsl|       1001 VCL_return      c hash
**** v1   vsl|       1001 VCL_call        c HASH
**** v1   vsl|       1001 VCL_return      c lookup
**** v1   vsl|       1001 VCL_call        c MISS
**** v1   vsl|       1001 VCL_return      c fetch
**** v1   vsl|       1001 Link            c bereq 1002 fetch
**** v1   vsl|       1001 Timestamp       c Fetch: 1634892890.400151 0.011254 0.011254
**** v1   vsl|       1001 RespProtocol    c HTTP/1.1
**** v1   vsl|       1001 RespStatus      c 200
**** v1   vsl|       1001 RespReason      c OK
**** v1   vsl|       1001 RespHeader      c Content-Length: 0
**** v1   vsl|       1001 RespHeader      c Date: Fri, 22 Oct 2021 08:54:50 GMT
**** v1   vsl|       1001 RespHeader      c X-Varnish: 1001
**** v1   vsl|       1001 RespHeader      c Age: 0
**** v1   vsl|       1001 RespHeader      c Via: 1.1 varnish (Varnish/6.5)
**** v1   vsl|       1001 VCL_call        c DELIVER
**** v1   vsl|       1001 RespHeader      c MyBlob-As-Hex: 666f6f626172
**** v1   vsl|       1001 RespHeader      c YourBlob-As-Base64: Zm9v
**** v1   vsl|       1001 RespHeader      c Base64-Encoded: YmF6
**** v1   vsl|       1001 RespHeader      c url_urlcoded: %2ffoo%20bar
**** v1   vsl|       1001 RespHeader      c Trunced-Foo1: foo
**** v1   vsl|       1001 RespHeader      c Trunced-Foo2: foo
**** v1   vsl|       1001 RespHeader      c First: abc
**** v1   vsl|       1001 RespHeader      c Second: def0
**** v1   vsl|       1001 RespHeader      c Hex-Decoded: 0abcdef0
**** v1   vsl|       1001 RespHeader      c encode1: 666f6f62617262617a
**** v1   vsl|       1001 RespHeader      c encode2: 666f6f62617262617a
**** v1   vsl|       1001 RespHeader      c encode3: foo
**** v1   vsl|       1001 RespHeader      c Hex2Base64-1: Zm9v
**** v1   vsl|       1001 RespHeader      c Hex2Base64-2: Zm9v
**** v1   vsl|       1001 RespHeader      c urldecoded: foo bar
**** v1   vsl|       1001 RespHeader      c urlencoded: foo%20bar
**** v1   vsl|       1001 RespHeader      c The-Blob1: blob
**** v1   vsl|       1001 RespHeader      c The-Blob2: blob
**** v1   vsl|       1001 RespHeader      c The-Stringblob: bazz
**** v1   vsl|       1001 RespHeader      c The-Blob: blob
**** v1   vsl|       1001 RespHeader      c The-Blob-b64: YmxvYg==
**** v1   vsl|       1001 VCL_return      c deliver
**** v1   vsl|       1001 Timestamp       c Process: 1634892890.400192 0.011295 0.000041
**** v1   vsl|       1001 Filters         c 
**** v1   vsl|       1001 RespHeader      c Accept-Ranges: bytes
**** v1   vsl|       1001 RespHeader      c Connection: keep-alive
**** v1   vsl|       1001 Timestamp       c Resp: 1634892890.400257 0.011360 0.000065
**** v1   vsl|       1001 ReqAcct         c 44 0 44 622 0 622
**** v1   vsl|       1001 End             c 
**** v1   vsl|       1000 SessClose       c REM_CLOSE 0.014
**** v1   vsl|       1000 End             c 
**** v1   vsl|          0 CLI             - Rd backend.list 
**** v1   vsl|          0 CLI             - Wr 200 134 Backend name   Admin      Probe    Health     Last change
vcl1.s1        healthy    0/0      healthy    Fri, 22 Oct 2021 08:54:50 GMT

**** v1   vsl|          0 CLI             - EOF on CLI connection, worker stops
**** dT   1.463
***  v1   CLI RX  200
**** dT   1.464
***  v1   wait-stopped
**** v1   CLI TX|status
***  v1   debug|Info: Child (71771) ended
***  v1   debug|Info: Child (71771) said Child dies
***  v1   debug|Debug: Child cleanup complete
***  v1   CLI RX  200
**** v1   CLI RX|Child in state stopped
**** v1   CLI TX|panic.clear
***  v1   CLI RX  300
**** v1   CLI RX|No panic to clear
***  v1   debug|Info: manager stopping child
***  v1   debug|Info: manager dies
**** v1   STDOUT EOF
**** dT   1.516
**   v1   WAIT4 pid=71717 status=0x0000 (user 0.165145 sys 0.059523)
*    top  TEST ./tests/m00044.vtc completed
#    top  TEST ./tests/m00044.vtc passed (1.517)
