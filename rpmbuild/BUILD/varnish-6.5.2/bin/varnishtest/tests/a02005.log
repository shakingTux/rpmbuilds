**** dT   0.000
*    top  TEST ./tests/a02005.vtc starting
**** top  extmacro def pwd=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest
**** top  extmacro def localhost=127.0.0.1
**** top  extmacro def bad_backend=127.0.0.1 40681
**** top  extmacro def bad_ip=192.0.2.255
**** top  extmacro def topbuild=/root/rpmbuild/BUILD/varnish-6.5.2
**** top  macro def testdir=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest/./tests
**** top  macro def tmpdir=/tmp/vtc.45298.37e7301a
**   top  === varnishtest "Continuation frames"
*    top  VTEST Continuation frames
**   top  === server s1 {
**   s1   Starting server
**** s1   macro def s1_addr=127.0.0.1
**** s1   macro def s1_port=43283
**** s1   macro def s1_sock=127.0.0.1 43283
*    s1   Listen on 127.0.0.1 43283
**   top  === client c1 -connect ${s1_sock} {
**   c1   Starting client
**   s1   Started on 127.0.0.1 43283 (1 iterations)
**** dT   0.001
**   c1   Waiting for client
**   c1   Started on 127.0.0.1 43283 (1 iterations)
***  c1   Connect to 127.0.0.1 43283
***  s1   accepted fd 5 127.0.0.1 40400
**   s1   === stream 1 {
**** s1   Not in H/2 mode, do what's needed
**   s1   === rxpri
***  c1   connected fd 6 from 127.0.0.1 40400 to 127.0.0.1 43283
**   c1   === stream 1 {
**** c1   Not in H/2 mode, do what's needed
**   c1   === txpri
**** c1   txpri|PRI * HTTP/2.0\r
**** c1   txpri|\r
**** c1   txpri|SM\r
**** c1   txpri|\r
**** dT   0.011
**   s1   === stream 0 {
**   s1   Starting stream 0x7fbc3c001410
**   s1   Waiting for stream 0
**   s1   === txsettings
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === stream 0 {
**   c1   Starting stream 0x7fbc340014f0
**   s1   === rxsettings
**   c1   Waiting for stream 0
**** dT   0.012
**   c1   === txsettings
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   s1   === rxsettings
**   c1   === rxsettings
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === txsettings -ack
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   flag: ACK
**   s1   === expect settings.ack == true
**** s1   EXPECT settings.ack (true) == "true" match
**   s1   Ending stream 0
**   c1   === rxsettings
**   s1   Starting stream 0x7fbc3c0026a0
**   s1   Waiting for stream 1
**   s1   === rxreq
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   flag: ACK
**   c1   === expect settings.ack == true
**** c1   EXPECT settings.ack (true) == "true" match
**   c1   Ending stream 0
**   c1   Starting stream 0x7fbc340026f0
**   c1   Waiting for stream 1
**   c1   === txreq
***  c1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 36
***  s1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 36
***  s1   flag: END_STREAM
**** s1   header[ 0]: :path : /
**** s1   header[ 1]: :method : GET
**** s1   header[ 2]: :scheme : http
**   s1   === txresp -nohdrend
***  s1   tx: stream: 1, type: HEADERS (1), flags: 0x01, size: 13
**   s1   === txcont -nohdrend -hdr "foo" "bar"
***  s1   tx: stream: 1, type: CONTINUATION (9), flags: 0x00, size: 9
**   s1   === txcont	   -hdr "baz" "qux"
***  s1   tx: stream: 1, type: CONTINUATION (9), flags: 0x04, size: 9
**   s1   Ending stream 1
**   s1   === stream 3 {
**   s1   Starting stream 0x7fbc3c003700
**   s1   Waiting for stream 3
**   c1   === rxhdrs -all
***  c1   rx: stream: 1, type: HEADERS (1), flags: 0x01, size: 13
***  c1   flag: END_STREAM
**   s1   === rxreq
***  c1   rx: stream: 1, type: CONTINUATION (9), flags: 0x00, size: 9
***  c1   rx: stream: 1, type: CONTINUATION (9), flags: 0x04, size: 9
***  c1   flag: END_TYPE_HEADERS
**** c1   header[ 0]: :status : 200
**** c1   header[ 1]: foo : bar
**** c1   header[ 2]: baz : qux
**   c1   === expect resp.http.foo == "bar"
**** c1   EXPECT resp.http.foo (bar) == "bar" match
**   c1   === expect resp.http.baz == "qux"
**** c1   EXPECT resp.http.baz (qux) == "qux" match
**   c1   Ending stream 1
**   c1   === stream 3 {
**   c1   Starting stream 0x7fbc34003770
**   c1   Waiting for stream 3
**   c1   === txreq
**** dT   0.013
***  c1   tx: stream: 3, type: HEADERS (1), flags: 0x05, size: 36
***  s1   rx: stream: 3, type: HEADERS (1), flags: 0x05, size: 36
***  s1   flag: END_STREAM
**** s1   header[ 0]: :path : /
**** s1   header[ 1]: :method : GET
**** s1   header[ 2]: :scheme : http
**   c1   === rxhdrs -some 2
**   s1   === txresp -nohdrend
***  s1   tx: stream: 3, type: HEADERS (1), flags: 0x01, size: 13
***  c1   rx: stream: 3, type: HEADERS (1), flags: 0x01, size: 13
***  c1   flag: END_STREAM
**   s1   === txcont -nohdrend -hdr "foo2" "bar2"
***  s1   tx: stream: 3, type: CONTINUATION (9), flags: 0x00, size: 11
***  c1   rx: stream: 3, type: CONTINUATION (9), flags: 0x00, size: 11
**   s1   === txcont	   -hdr "baz2" "qux2"
***  s1   tx: stream: 3, type: CONTINUATION (9), flags: 0x04, size: 11
**   c1   === expect resp.http.foo2 == <undef>
**** c1   EXPECT resp.http.foo2 (<undef>) == "<undef>" match
**   c1   === expect resp.http.baz2 == <undef>
**** c1   EXPECT resp.http.baz2 (<undef>) == "<undef>" match
**   c1   === rxcont
***  c1   rx: stream: 3, type: CONTINUATION (9), flags: 0x04, size: 11
***  c1   flag: END_TYPE_HEADERS
**** c1   header[ 0]: :status : 200
**** c1   header[ 1]: foo2 : bar2
**** c1   header[ 2]: baz2 : qux2
**   s1   Ending stream 3
**   c1   === expect resp.http.foo2 == "bar2"
**** c1   EXPECT resp.http.foo2 (bar2) == "bar2" match
**   c1   === expect resp.http.baz2 == "qux2"
**** c1   EXPECT resp.http.baz2 (qux2) == "qux2" match
**   c1   Ending stream 3
***  c1   closing fd 6
**   c1   Ending
**   top  === server s1 -wait
**   s1   Waiting for server (4/-1)
***  s1   shutting fd 5
**   s1   Ending
*    top  RESETTING after ./tests/a02005.vtc
*    top  TEST ./tests/a02005.vtc completed
#    top  TEST ./tests/a02005.vtc passed (0.094)
