**** dT   0.000
*    top  TEST ./tests/a02016.vtc starting
**** top  extmacro def pwd=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest
**** top  extmacro def localhost=127.0.0.1
**** top  extmacro def bad_backend=127.0.0.1 36969
**** top  extmacro def bad_ip=192.0.2.255
**** top  extmacro def topbuild=/root/rpmbuild/BUILD/varnish-6.5.2
**** top  macro def testdir=/root/rpmbuild/BUILD/varnish-6.5.2/bin/varnishtest/./tests
**** top  macro def tmpdir=/tmp/vtc.45689.56897da0
**   top  === varnishtest "Test pseudo-headers inspection"
*    top  VTEST Test pseudo-headers inspection
**   top  === server s1 {
**   s1   Starting server
**** s1   macro def s1_addr=127.0.0.1
**** s1   macro def s1_port=39241
**** s1   macro def s1_sock=127.0.0.1 39241
*    s1   Listen on 127.0.0.1 39241
**   top  === client c1 -connect ${s1_sock} {
**   c1   Starting client
**   top  === server s1 -wait
**   s1   Waiting for server (4/-1)
**   s1   Started on 127.0.0.1 39241 (1 iterations)
**   c1   Started on 127.0.0.1 39241 (1 iterations)
***  c1   Connect to 127.0.0.1 39241
***  c1   connected fd 6 from 127.0.0.1 38030 to 127.0.0.1 39241
**   c1   === stream 1 {
**** c1   Not in H/2 mode, do what's needed
**   c1   === txpri
**** c1   txpri|PRI * HTTP/2.0\r
**** c1   txpri|\r
**** c1   txpri|SM\r
**** c1   txpri|\r
**** dT   0.001
***  s1   accepted fd 5 127.0.0.1 38030
**   s1   === stream 1 {
**** s1   Not in H/2 mode, do what's needed
**   s1   === rxpri
**** dT   0.011
**   s1   === stream 0 {
**   s1   Starting stream 0x7f2638001470
**   c1   === stream 0 {
**   s1   Waiting for stream 0
**   c1   Starting stream 0x7f2630001470
**   s1   === txsettings
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   Waiting for stream 0
**   c1   === txsettings
**   s1   === rxsettings
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === rxsettings
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   s1   === txsettings -ack
***  s1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   s1   === rxsettings
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x00, size: 0
**   c1   === txsettings -ack
***  c1   tx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
**   c1   === rxsettings
***  s1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  s1   flag: ACK
**   s1   === expect settings.ack == true
**** s1   EXPECT settings.ack (true) == "true" match
**   s1   Ending stream 0
**** dT   0.012
**   s1   Starting stream 0x7f2638002700
**   s1   Waiting for stream 1
**   s1   === rxreq
***  c1   rx: stream: 0, type: SETTINGS (4), flags: 0x01, size: 0
***  c1   flag: ACK
**   c1   === expect settings.ack == true
**** c1   EXPECT settings.ack (true) == "true" match
**   c1   Ending stream 0
**   c1   Starting stream 0x7f2630002670
**   c1   Waiting for stream 1
**   c1   === txreq -url "/foo" \
***  c1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 57
***  s1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 57
***  s1   flag: END_STREAM
**** s1   header[ 0]: :path : /foo
**** s1   header[ 1]: :method : NOTGET
**** s1   header[ 2]: :authority : bar
**** s1   header[ 3]: :scheme : baz
**   c1   === rxresp
**   s1   === expect req.url == "/foo"
**** s1   EXPECT req.url (/foo) == "/foo" match
**   s1   === expect req.http.:path == "/foo"
**** s1   EXPECT req.http.:path (/foo) == "/foo" match
**   s1   === expect req.method == "NOTGET"
**** s1   EXPECT req.method (NOTGET) == "NOTGET" match
**   s1   === expect req.http.:method == "NOTGET"
**** s1   EXPECT req.http.:method (NOTGET) == "NOTGET" match
**   s1   === expect req.authority == "bar"
**** s1   EXPECT req.authority (bar) == "bar" match
**   s1   === expect req.http.:authority == "bar"
**** s1   EXPECT req.http.:authority (bar) == "bar" match
**   s1   === expect req.scheme == "baz"
**** s1   EXPECT req.scheme (baz) == "baz" match
**   s1   === expect req.http.:scheme == "baz"
**** s1   EXPECT req.http.:scheme (baz) == "baz" match
**   s1   === txresp -status 123
***  s1   tx: stream: 1, type: HEADERS (1), flags: 0x05, size: 13
***  c1   rx: stream: 1, type: HEADERS (1), flags: 0x05, size: 13
***  c1   flag: END_STREAM
**   s1   Ending stream 1
**** c1   header[ 0]: :status : 123
**   c1   === expect resp.status == 123
***  s1   shutting fd 5
**   s1   Ending
**** c1   EXPECT resp.status (123) == "123" match
**   c1   Ending stream 1
*    top  RESETTING after ./tests/a02016.vtc
**   c1   Waiting for client
***  c1   closing fd 6
**   c1   Ending
*    top  TEST ./tests/a02016.vtc completed
#    top  TEST ./tests/a02016.vtc passed (0.013)
